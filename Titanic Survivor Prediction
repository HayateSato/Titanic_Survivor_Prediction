{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/hayatesato95/titanic-survivor-prediction-model-siegess-ule?scriptVersionId=178805213\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing\n\n# visualisation \nimport seaborn as sns \n%matplotlib inline \nfrom matplotlib import pyplot as plt\nfrom matplotlib import pyplot as stlye\n\nimport plotly.graph_objs as go # bar and pie charts, Plotly\n\n\n# datamining / Algorithm\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:41.839149Z","iopub.execute_input":"2024-05-20T19:23:41.839543Z","iopub.status.idle":"2024-05-20T19:23:41.848572Z","shell.execute_reply.started":"2024-05-20T19:23:41.839513Z","shell.execute_reply":"2024-05-20T19:23:41.847464Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":"# 0. Loading Data","metadata":{}},{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:41.857537Z","iopub.execute_input":"2024-05-20T19:23:41.857931Z","iopub.status.idle":"2024-05-20T19:23:41.865508Z","shell.execute_reply.started":"2024-05-20T19:23:41.857899Z","shell.execute_reply":"2024-05-20T19:23:41.864225Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ngender_df = pd.read_csv(\"/kaggle/input/titanic/gender_submission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:41.890773Z","iopub.execute_input":"2024-05-20T19:23:41.891175Z","iopub.status.idle":"2024-05-20T19:23:41.907902Z","shell.execute_reply.started":"2024-05-20T19:23:41.891144Z","shell.execute_reply":"2024-05-20T19:23:41.906948Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":"# 1. Data Understanding ","metadata":{}},{"cell_type":"code","source":"print(train_df.info())\nprint(\"\\n--------------------------------------------------------------------\\n\")\nprint(test_df.info())\nprint(\"\\n--------------------------------------------------------------------\\n\")\nprint(gender_df.info())","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:41.923399Z","iopub.execute_input":"2024-05-20T19:23:41.924395Z","iopub.status.idle":"2024-05-20T19:23:41.94578Z","shell.execute_reply.started":"2024-05-20T19:23:41.924357Z","shell.execute_reply":"2024-05-20T19:23:41.94466Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\n\n--------------------------------------------------------------------\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  418 non-null    int64  \n 1   Pclass       418 non-null    int64  \n 2   Name         418 non-null    object \n 3   Sex          418 non-null    object \n 4   Age          332 non-null    float64\n 5   SibSp        418 non-null    int64  \n 6   Parch        418 non-null    int64  \n 7   Ticket       418 non-null    object \n 8   Fare         417 non-null    float64\n 9   Cabin        91 non-null     object \n 10  Embarked     418 non-null    object \ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\nNone\n\n--------------------------------------------------------------------\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   PassengerId  418 non-null    int64\n 1   Survived     418 non-null    int64\ndtypes: int64(2)\nmemory usage: 6.7 KB\nNone\n","output_type":"stream"}]},{"cell_type":"markdown","source":"- you have to change the categorical values to numerical \n- be careful with float data and int data\n\n- test_df dose not have the survived col ","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"# Make all column names lowercase. \ntrain_df.rename(columns={column: column.lower() for column in train_df.columns}, inplace=True)\nprint(train_df.columns)\n\nprint(\"=============================================================\")\n\ntest_df.rename(columns={column: column.lower() for column in test_df.columns}, inplace=True)\nprint(test_df.columns)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:41.956698Z","iopub.execute_input":"2024-05-20T19:23:41.957334Z","iopub.status.idle":"2024-05-20T19:23:41.96667Z","shell.execute_reply.started":"2024-05-20T19:23:41.957301Z","shell.execute_reply":"2024-05-20T19:23:41.965437Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Index(['passengerid', 'survived', 'pclass', 'name', 'sex', 'age', 'sibsp',\n       'parch', 'ticket', 'fare', 'cabin', 'embarked'],\n      dtype='object')\n=============================================================\nIndex(['passengerid', 'pclass', 'name', 'sex', 'age', 'sibsp', 'parch',\n       'ticket', 'fare', 'cabin', 'embarked'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"# Use PassengerId as index\ntrain_df = train_df.set_index(\"passengerid\")\ntrain_df.head(1)\n\ntest_df = test_df.set_index(\"passengerid\")\ntest_df.head(1)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:42.010527Z","iopub.execute_input":"2024-05-20T19:23:42.010931Z","iopub.status.idle":"2024-05-20T19:23:42.030914Z","shell.execute_reply.started":"2024-05-20T19:23:42.010899Z","shell.execute_reply":"2024-05-20T19:23:42.029959Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"             pclass              name   sex   age  sibsp  parch  ticket  \\\npassengerid                                                               \n892               3  Kelly, Mr. James  male  34.5      0      0  330911   \n\n               fare cabin embarked  \npassengerid                         \n892          7.8292   NaN        Q  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pclass</th>\n      <th>name</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>ticket</th>\n      <th>fare</th>\n      <th>cabin</th>\n      <th>embarked</th>\n    </tr>\n    <tr>\n      <th>passengerid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# summarising the given dataset\ncolumns = train_df.columns\ncolumns = pd.Series(columns)\n\ndescription = [\"survival result\", \"rank of the tickets 1 - 3\", \"passengerÂ´s name\", \"sex of the passenger\", \"age of the passenger\", \"the num of siblings/spouses on the board\", \"the num of parents/children on the board\", \"ticker number\", \"price of the ticket\", \"cabin number\", \"port of embarkation\" ]\ndescription = pd.Series(description)\n\ndata_overview = pd.concat([columns, description], axis = 1, keys = [\"column name\", \"description\"])\ndata_overview","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:42.032666Z","iopub.execute_input":"2024-05-20T19:23:42.033021Z","iopub.status.idle":"2024-05-20T19:23:42.046156Z","shell.execute_reply.started":"2024-05-20T19:23:42.032993Z","shell.execute_reply":"2024-05-20T19:23:42.044986Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"   column name                               description\n0     survived                           survival result\n1       pclass                 rank of the tickets 1 - 3\n2         name                          passengerÂ´s name\n3          sex                      sex of the passenger\n4          age                      age of the passenger\n5        sibsp  the num of siblings/spouses on the board\n6        parch  the num of parents/children on the board\n7       ticket                             ticker number\n8         fare                       price of the ticket\n9        cabin                              cabin number\n10    embarked                       port of embarkation","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column name</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>survived</td>\n      <td>survival result</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>pclass</td>\n      <td>rank of the tickets 1 - 3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>name</td>\n      <td>passengerÂ´s name</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>sex</td>\n      <td>sex of the passenger</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>age</td>\n      <td>age of the passenger</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>sibsp</td>\n      <td>the num of siblings/spouses on the board</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>parch</td>\n      <td>the num of parents/children on the board</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>ticket</td>\n      <td>ticker number</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>fare</td>\n      <td>price of the ticket</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>cabin</td>\n      <td>cabin number</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>embarked</td>\n      <td>port of embarkation</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# statistical summary\n\ntrain_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:42.056539Z","iopub.execute_input":"2024-05-20T19:23:42.057645Z","iopub.status.idle":"2024-05-20T19:23:42.083896Z","shell.execute_reply.started":"2024-05-20T19:23:42.057602Z","shell.execute_reply":"2024-05-20T19:23:42.082792Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"         survived      pclass         age       sibsp       parch        fare\ncount  891.000000  891.000000  714.000000  891.000000  891.000000  891.000000\nmean     0.383838    2.308642   29.699118    0.523008    0.381594   32.204208\nstd      0.486592    0.836071   14.526497    1.102743    0.806057   49.693429\nmin      0.000000    1.000000    0.420000    0.000000    0.000000    0.000000\n25%      0.000000    2.000000   20.125000    0.000000    0.000000    7.910400\n50%      0.000000    3.000000   28.000000    0.000000    0.000000   14.454200\n75%      1.000000    3.000000   38.000000    1.000000    0.000000   31.000000\nmax      1.000000    3.000000   80.000000    8.000000    6.000000  512.329200","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>pclass</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"survival rate is 38% ","metadata":{}},{"cell_type":"code","source":"# missing value\nmissing_value_counts = train_df.isnull().sum()\nmissing_col_and_counts = missing_value_counts[missing_value_counts > 0]\n\n\n# print(missing_col_and_counts)\n# print(\"\\n--------------------------------------------------------------------\\n\")\n\nmissing_percentage = train_df.isnull().sum() / len(train_df) * 100\nmissing_percentage = round(missing_percentage, 2)\n# missing_percentage2 = train_df.isnull().sum() / train_df.isnull().sum().sum() * 100\n# missing_percentage3 = train_df.isnull().sum() / train_df.isnull().count() * 100\n\n\nmissing_percentage = missing_percentage[missing_percentage > 0]\n# print(missing_percentage)\n# print(len(train_df))\n\n# print(\"\\n--------------------------------------------------------------------\\n\")\n# print(missing_percentage2)\n# print(train_df.isnull().sum().sum())\n\n# print(\"\\n--------------------------------------------------------------------\\n\")\n# print(missing_percentage3)\n# print(train_df.isnull().count())\n\n#### somehow \"train_df.isnull().sum().sum()\" gives a different ttl number. why? what is it counting?\n\n\n# print(\"\\n--------------------------------------------------------------------\\n\")\nmissing_summary = pd.concat([missing_col_and_counts,missing_percentage], axis = 1, keys = [\"counts\", \"%\"])\n# print(missing_summary)\nmissing_summary","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:42.091087Z","iopub.execute_input":"2024-05-20T19:23:42.092003Z","iopub.status.idle":"2024-05-20T19:23:42.108357Z","shell.execute_reply.started":"2024-05-20T19:23:42.091966Z","shell.execute_reply":"2024-05-20T19:23:42.107561Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"          counts      %\nage          177  19.87\ncabin        687  77.10\nembarked       2   0.22","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>counts</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>age</th>\n      <td>177</td>\n      <td>19.87</td>\n    </tr>\n    <tr>\n      <th>cabin</th>\n      <td>687</td>\n      <td>77.10</td>\n    </tr>\n    <tr>\n      <th>embarked</th>\n      <td>2</td>\n      <td>0.22</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"- age --> impute\n* Cabin --> discard\n- emnarked --> impute","metadata":{}},{"cell_type":"markdown","source":"# Overview","metadata":{}},{"cell_type":"code","source":"# Select only the numerical columns\nnumerical_df = train_df.select_dtypes(include=['number'])\n\ncorrelation_matrix = numerical_df.corr()\n\n# Create a heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n\n# Add a title\nplt.title('Correlation Heatmap')\n\n# Display the heatmap\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:42.118706Z","iopub.execute_input":"2024-05-20T19:23:42.119142Z","iopub.status.idle":"2024-05-20T19:23:42.498158Z","shell.execute_reply.started":"2024-05-20T19:23:42.119111Z","shell.execute_reply":"2024-05-20T19:23:42.496943Z"},"trusted":true},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Age and Sex","metadata":{}},{"cell_type":"code","source":"# setting variable name for survived col\nsurvived = \"survived\"\nnot_survived = \"not_survived\"\n\n# setting variable name for sex col\nwomen = train_df[ train_df[\"sex\"] == \"female\" ]\nmen = train_df[ train_df[\"sex\"] == \"male\" ]\n\n# visualisation for female \nfig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (10, 4)) # showing two graph next to each other\nax = sns.distplot(women[ women[\"survived\"] == 1 ][\"age\"].dropna(), # visualising survived x women\n                  bins = 18,\n                  label = survived, \n                  ax = axes[0], \n                  kde = False\n                 )\nax = sns.distplot(women[ women[\"survived\"] == 0 ][\"age\"].dropna(),  # visualising not survived x women\n                  bins = 40,\n                  label = survived, \n                  ax = axes[0], \n                  kde = False\n                 )\nax.legend()\nax.set_title(\"Female\")\n\n\n# visualisation for male \n# plt.subplots(nrows = 1, ncols = 2, figsize = (10, 4)) # showing two graph next to each other\nax = sns.distplot(men[ men[\"survived\"] == 1 ][\"age\"].dropna(), # visualising survived x men\n                  bins = 18,\n                  label = survived, \n                  ax = axes[1], \n                  kde = False\n                 )\nax = sns.distplot(men[ men[\"survived\"] == 0 ][\"age\"].dropna(),  # visualising not survived x men\n                  bins = 40,\n                  label = survived, \n                  ax = axes[1], \n                  kde = False\n                 )\nax.legend()\nax.set_title(\"Male\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:42.500454Z","iopub.execute_input":"2024-05-20T19:23:42.502343Z","iopub.status.idle":"2024-05-20T19:23:43.276074Z","shell.execute_reply.started":"2024-05-20T19:23:42.502299Z","shell.execute_reply":"2024-05-20T19:23:43.27466Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_1064/3687846384.py:11: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  ax = sns.distplot(women[ women[\"survived\"] == 1 ][\"age\"].dropna(), # visualising survived x women\n/tmp/ipykernel_1064/3687846384.py:17: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  ax = sns.distplot(women[ women[\"survived\"] == 0 ][\"age\"].dropna(),  # visualising not survived x women\n/tmp/ipykernel_1064/3687846384.py:29: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  ax = sns.distplot(men[ men[\"survived\"] == 1 ][\"age\"].dropna(), # visualising survived x men\n/tmp/ipykernel_1064/3687846384.py:35: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  ax = sns.distplot(men[ men[\"survived\"] == 0 ][\"age\"].dropna(),  # visualising not survived x men\n","output_type":"stream"},{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Male')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- female has higher chance of survival \n- however, for the children under 5 years old male has higher number","metadata":{}},{"cell_type":"markdown","source":"# Embarked, pclass, sex","metadata":{}},{"cell_type":"code","source":"# survived = 1 is survivors\n\ngrid = sns.FacetGrid(data=train_df, \n                     hue='survived', \n                     row='pclass', \n                     col=\"embarked\",\n                     aspect=1.6\n                    )\n\ngrid.map(plt.hist, 'age', \n         alpha=.5, \n         bins=20\n        )\n\ngrid.add_legend();","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:43.277554Z","iopub.execute_input":"2024-05-20T19:23:43.277983Z","iopub.status.idle":"2024-05-20T19:23:47.616853Z","shell.execute_reply.started":"2024-05-20T19:23:43.277943Z","shell.execute_reply":"2024-05-20T19:23:47.615646Z"},"trusted":true},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1510.49x900 with 9 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- most people embarked at S while barely anyone got on board at Q\n- the higher the class is, the higher the chance of survival is too \n- however, people with the ticket of class 3 who got on aborad at S has the highest number of non-survival","metadata":{}},{"cell_type":"markdown","source":"# pclass and survived","metadata":{}},{"cell_type":"code","source":"sns.barplot(x='pclass', \n            y='survived', \n            data=train_df\n           )","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:47.619271Z","iopub.execute_input":"2024-05-20T19:23:47.619609Z","iopub.status.idle":"2024-05-20T19:23:47.919613Z","shell.execute_reply.started":"2024-05-20T19:23:47.619581Z","shell.execute_reply":"2024-05-20T19:23:47.918361Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='pclass', ylabel='survived'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- class 1 has the highest survival cases","metadata":{}},{"cell_type":"code","source":"# survived = 1 is survivors\ngrid = sns.FacetGrid(data = train_df, \n                     hue=\"survived\",\n                     col='pclass', \n                     aspect=1.6\n                    )\n\ngrid.map(plt.hist, 'age', \n         alpha=.5, \n         bins=20\n        )\n\ngrid.add_legend();","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:47.921813Z","iopub.execute_input":"2024-05-20T19:23:47.922259Z","iopub.status.idle":"2024-05-20T19:23:49.271284Z","shell.execute_reply.started":"2024-05-20T19:23:47.922219Z","shell.execute_reply":"2024-05-20T19:23:49.270007Z"},"trusted":true},"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1510.49x300 with 3 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- age up to 40 has higher survival rate\n- ","metadata":{}},{"cell_type":"code","source":"# creating a new column \"family\" for the number of family\ntrain_df[\"num_family\"] = train_df[\"sibsp\"] + train_df[\"parch\"]\ntest_df[\"num_family\"] = test_df[\"sibsp\"] + test_df[\"parch\"]\n\n# creating a new column \"with_family\" and marking as 1 if the passenger is not alone\ndata = [train_df, test_df]\nfor dataset in data:\n    dataset.loc[dataset[\"num_family\"] > 0, 'with_family'] = 1\n    dataset.loc[dataset[\"num_family\"] == 0, 'with_family'] = 0\n    dataset['with_family'] = dataset['with_family'].astype(int)\n\n# chacking the number\nprint(train_df[\"with_family\"].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:49.272793Z","iopub.execute_input":"2024-05-20T19:23:49.273151Z","iopub.status.idle":"2024-05-20T19:23:49.291822Z","shell.execute_reply.started":"2024-05-20T19:23:49.273121Z","shell.execute_reply":"2024-05-20T19:23:49.290421Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"with_family\n0    537\n1    354\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"- 537 people are without any other family memeber","metadata":{}},{"cell_type":"code","source":"sns.barplot(x=\"pclass\", y=\"num_family\", data=train_df)\n\n# comparing the survival \ngrid = sns.FacetGrid(data=train_df, \n                     hue = \"survived\",\n                     row = \"sex\",\n                     col = \"pclass\",\n                     aspect=1.6\n                    )\n\ngrid.map(plt.hist,\n         \"num_family\",\n         alpha = .5,\n        bins = 20)\ngrid.add_legend();","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:49.293993Z","iopub.execute_input":"2024-05-20T19:23:49.29467Z","iopub.status.idle":"2024-05-20T19:23:52.381835Z","shell.execute_reply.started":"2024-05-20T19:23:49.294625Z","shell.execute_reply":"2024-05-20T19:23:52.380755Z"},"trusted":true},"execution_count":43,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1510.49x600 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- class 3 had the highest num of family member on the ship\n- generally, the less family member the higher survival cases","metadata":{}},{"cell_type":"code","source":"axes = sns.catplot(y=\"num_family\",\n                   x=\"survived\",\n                   data=train_df, \n                   aspect = 2.5, )","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.383302Z","iopub.execute_input":"2024-05-20T19:23:52.383727Z","iopub.status.idle":"2024-05-20T19:23:52.725982Z","shell.execute_reply.started":"2024-05-20T19:23:52.383688Z","shell.execute_reply":"2024-05-20T19:23:52.724791Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n  data_subset = grouped_data.get_group(pd_key)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1250x500 with 1 Axes>","image/png":"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Ojry5je/OV/4whdy3HHH5QMf+EAuu+yyLFy4sNc28+bNS1tbW+dn7dq1Q1gxMNCObD5wQPqZ1twwYGMX6asS/VdivKE+JwBg8PR2Xx89orbH7QNxv6+GuUQ11AAML4XCtU996lP59a9/PdC1dDNx4sS86U1v6rLtqKOOytNPP91rm5EjR6axsbHLBxi+rpgzNaVSz/t62dxte6mUXHlqy4CMXbSvSvRfifGG+pwAgMHT2339wpOnDNr9vhrmEtVQAzC8FFrQ4Nhjj83jjz+eU045JZdeemn+/M//PCNHjhzw4t773vdm7dq1XRY0uOaaa/Lwww9n6dKlferDggYw/C1avj4LlqzJinXtqfv9aqHTJzbmylNbUs6O91+sat2Yac0NvW47fV9WCx2gvirRfyXGG+pzAgAGT2/39cG831fDXKIaagCGj8KrhT766KP55je/mX/4h3/IK6+8kr/8y7/MJZdckhNOOGHAivvJT36S2bNn59Of/nTOPffc/PjHP85ll12Wr3/965k7d26f+hCuAQAAADBYCodrO23bti3/9E//lG9+85tZtGhRpk+fnksvvTQXXXRRmpqa9rnAf/7nf868efOyatWqHH744bn22mtz2WWX9bm9cA0AAACAwbLPCxqUy+Vs27YtW7duTblczute97p85StfyeTJk3PXXXftc4F/+qd/mp///Od5+eWXs2LFin4FawAAAAAwmAqHa8uWLcuHP/zhTJw4Mddcc02OO+64rFixIg888EBWrVqVz3/+87nqqqsGslYAAAAAqCqFHgs95phj8sQTT+T000/PZZddlne+852pre26HPOzzz6b8ePHp6OjY8CKLcJjoQAAAAAMlroijc4999xccsklef3rX9/rMePGjat4sAYAAAAAg2mfFzSodr65BgAAAMBg6fM316699to+d3rTTTcVKgYAAAAAhpM+h2uPPvpon44rlUqFiwEAAACA4cRjoQAAAABQUE2lCwAAAACA4arPj4Wec845ue2229LY2Jhzzjlnj8f+r//1v/a5MAAAAACodn0O15qamjrfp9bU1DRoBQEAAADAcOGdawAAAABQkHeuAQAAAEBBfX4sdFfPPfdcPvnJT2bx4sXZsGFDOjo6uux//vnnB6Q4AAAAAKhmhcK1Cy64IKtXr86ll16a5ubmznexAQAAAMD+pFC49m//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Pe/JN77xjfzud7/rVx/HH398l58POeSQnH766fn2t7+dJHnyySfz0EMPZe7cuT22r6ury7nnntt5/Isvvph//Md/7Dx+9erV2bx5c/74j/84Bx54YOfnjjvuyJo1a5IkK1asyEknndSl351BHADAa4lvrgEAVJHa2tr867/+a5YuXZrvf//7ueWWW/I3f/M3efjhh1NTU9Pt8dBt27Z166OnVT/nzp2bq666KrfcckvuvPPOHHPMMXv8RtzcuXNzyimnZMOGDfnXf/3XjBo1KmeeeWaSdD4u+i//8i95/etf36XdyJEj+33OAADDmW+uAQBUmVKplJNPPjmf/vSn8+ijj6a+vj533313DjnkkKxbt67zuO3bt+fxxx/vU5/vete78vLLL+e+++7LnXfe2eu31naaPXt2Jk+enLvuuivf/va38573vCcjRoxIkrzpTW/KyJEj8/TTT2fq1KldPpMnT06SHHXUUfnxj3/cpc//+3//b38uAwDAsOCbawAAVeThhx/O/fffn9NPPz3jx4/Pww8/nGeeeSZHHXVUxowZk2uvvTb/8i//kpaWltx000154YUX+tTvmDFjcvbZZ+eGG27IihUrct555+21zXvf+94sXLgwK1euzOLFizu3NzQ05K/+6q9yzTXXpKOjI29961vT1taWH/3oR2lsbMyFF16YD33oQ/nyl7+cv/7rv8773//+LFu2LLfddlvBqwIAUL2EawAAVaSxsTEPPvhgbr755rS3t+ewww7Ll7/85Zx11lnZtm1bfvazn+V973tf6urqcs0112TOnDl97nvu3Ll5xzvekbe97W059NBD+3T85z//+Rx22GE5+eSTu+z77Gc/m0MOOSTz58/Pr371qxx00EF585vfnE984hNJkkMPPTT/83/+z1xzzTW55ZZbcuKJJ+YLX/hCLrnkkv5dEACAKlcq92dddwAAAACgk3euAQAAAEBBwjUAAAAAKEi4BgAAAAAFCdcAAAAAoCDhGgAAAAAUJFwDAAAAgIKEawAAAABQkHANAAAAAAoSrgEAAABAQcI1AAAAAChIuAYAAAAABf1/atLRyRC/AvcAAAAASUVORK5CYII="},"metadata":{}}]},{"cell_type":"markdown","source":"# Data Processing - filling NA","metadata":{}},{"cell_type":"markdown","source":"## Cabin","metadata":{}},{"cell_type":"code","source":"print(train_df[\"cabin\"].describe())\n\ntrain_df[\"cabin\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.727805Z","iopub.execute_input":"2024-05-20T19:23:52.728446Z","iopub.status.idle":"2024-05-20T19:23:52.739927Z","shell.execute_reply.started":"2024-05-20T19:23:52.728415Z","shell.execute_reply":"2024-05-20T19:23:52.738801Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"count         204\nunique        147\ntop       B96 B98\nfreq            4\nName: cabin, dtype: object\n","output_type":"stream"},{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"array([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n       'C148'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"# converting the cabin info into numeric \n\nimport re\ndeck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    # filling a missing value with \"U0\"\n    dataset['cabin'] = dataset['cabin'].fillna(\"U0\")\n    \n    # fidning alphabet letter from the \"cabin\" column \n    # .serach(x) looks for the the first occurrence of one or more letters in each value  \n    # .group() then extracts the letter of the first occurance / anything found by .search() method\n    dataset['deck'] = dataset['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n    # replacing the aplhabet with a number as per Deck dictionary\n    dataset['deck'] = dataset['deck'].map(deck)\n    # in case of remaining missing value, you replace with 0\n    dataset['deck'] = dataset['deck'].fillna(0)\n    # changing the value into intger\n    dataset['deck'] = dataset['deck'].astype(int)\n\n\n# dropping cabin column\ntrain_df = train_df.drop([\"cabin\"], axis=1)\ntest_df = test_df.drop([\"cabin\"], axis=1)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.745114Z","iopub.execute_input":"2024-05-20T19:23:52.745479Z","iopub.status.idle":"2024-05-20T19:23:52.7652Z","shell.execute_reply.started":"2024-05-20T19:23:52.745449Z","shell.execute_reply":"2024-05-20T19:23:52.763838Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.766555Z","iopub.execute_input":"2024-05-20T19:23:52.766935Z","iopub.status.idle":"2024-05-20T19:23:52.7859Z","shell.execute_reply.started":"2024-05-20T19:23:52.766897Z","shell.execute_reply":"2024-05-20T19:23:52.78467Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 418 entries, 892 to 1309\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   pclass       418 non-null    int64  \n 1   name         418 non-null    object \n 2   sex          418 non-null    object \n 3   age          332 non-null    float64\n 4   sibsp        418 non-null    int64  \n 5   parch        418 non-null    int64  \n 6   ticket       418 non-null    object \n 7   fare         417 non-null    float64\n 8   embarked     418 non-null    object \n 9   num_family   418 non-null    int64  \n 10  with_family  418 non-null    int64  \n 11  deck         418 non-null    int64  \ndtypes: float64(2), int64(6), object(4)\nmemory usage: 42.5+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.787566Z","iopub.execute_input":"2024-05-20T19:23:52.788005Z","iopub.status.idle":"2024-05-20T19:23:52.803348Z","shell.execute_reply.started":"2024-05-20T19:23:52.787958Z","shell.execute_reply":"2024-05-20T19:23:52.802094Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 891 entries, 1 to 891\nData columns (total 13 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   survived     891 non-null    int64  \n 1   pclass       891 non-null    int64  \n 2   name         891 non-null    object \n 3   sex          891 non-null    object \n 4   age          714 non-null    float64\n 5   sibsp        891 non-null    int64  \n 6   parch        891 non-null    int64  \n 7   ticket       891 non-null    object \n 8   fare         891 non-null    float64\n 9   embarked     889 non-null    object \n 10  num_family   891 non-null    int64  \n 11  with_family  891 non-null    int64  \n 12  deck         891 non-null    int64  \ndtypes: float64(2), int64(7), object(4)\nmemory usage: 97.5+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### trying to understand  re.compile","metadata":{}},{"cell_type":"code","source":"# test = train_df.iloc[-20:-1, 9:]\n# test","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.804987Z","iopub.execute_input":"2024-05-20T19:23:52.805294Z","iopub.status.idle":"2024-05-20T19:23:52.813431Z","shell.execute_reply.started":"2024-05-20T19:23:52.805268Z","shell.execute_reply":"2024-05-20T19:23:52.812414Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"# test['cabin'] = test['cabin'].astype(int)\n# test.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.814978Z","iopub.execute_input":"2024-05-20T19:23:52.815375Z","iopub.status.idle":"2024-05-20T19:23:52.824373Z","shell.execute_reply.started":"2024-05-20T19:23:52.815338Z","shell.execute_reply":"2024-05-20T19:23:52.823517Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"# # converting the cabin info into numeric \n\n# import re\n# deck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\n# data = [test]\n\n# for dataset in data:\n#     # filling a missing value with \"U0\"\n#     test['cabin'] = test['cabin'].fillna(\"U0\")\n    \n#     # fidning alphabet letter from the \"cabin\" column \n#     # .serach(x) looks for the the first occurrence of one or more letters in each value  \n#     # .group() then extracts the letter of the first occurance / anything found by .search() method\n#     test['re.compile'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\"))\n#     test['search'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x))\n#     test['group'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n#     # replacing the aplhabet with a number as per Deck dictionary\n#     test['cabin'] = test['cabin'].map(deck)\n# #     in case of remaining missing value, you replace with 0\n#     test['cabin'] = test['cabin'].fillna(0)\n# #     changing the value into intger\n#     test['cabin'] = test['cabin'].astype(int)\n\n# test\n# # # dropping cabin column\n# # train_df.drop([\"cabin\"], axis=1)\n    \n    \n# # # we can now drop the cabin feature\n# # train_df = train_df.drop(['Cabin'], axis=1)\n# # test_df = test_df.drop(['Cabin'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.826065Z","iopub.execute_input":"2024-05-20T19:23:52.826469Z","iopub.status.idle":"2024-05-20T19:23:52.835483Z","shell.execute_reply.started":"2024-05-20T19:23:52.826432Z","shell.execute_reply":"2024-05-20T19:23:52.834488Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"# for dataset in data:\n#     # filling a missing value with \"U0\"\n#     test['cabin'] = test['cabin'].fillna(\"U0\")\n    \n#     # fidning alphabet letter from the \"cabin\" column \n#     # .serach(x) looks for the the first occurrence of one or more letters in each value  \n#     # .group() then extracts the letter of the first occurance / anything found by .search() method\n# #     test['re.compile'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\"))\n# #     test['search'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x))\n# #     test['group'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n#     # replacing the aplhabet with a number as per Deck dictionary\n#     test['cabin'] = test['cabin'].map(deck)\n    \n# test","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.837081Z","iopub.execute_input":"2024-05-20T19:23:52.837463Z","iopub.status.idle":"2024-05-20T19:23:52.848296Z","shell.execute_reply.started":"2024-05-20T19:23:52.837428Z","shell.execute_reply":"2024-05-20T19:23:52.847475Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"code","source":"train_df[train_df[\"deck\"] > 0 ][\"deck\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.849649Z","iopub.execute_input":"2024-05-20T19:23:52.850205Z","iopub.status.idle":"2024-05-20T19:23:52.865344Z","shell.execute_reply.started":"2024-05-20T19:23:52.850174Z","shell.execute_reply":"2024-05-20T19:23:52.864389Z"},"trusted":true},"execution_count":53,"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"deck\n8    687\n3     59\n2     47\n4     33\n5     32\n1     15\n6     13\n7      4\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## Age","metadata":{}},{"cell_type":"code","source":"train_std = train_df[\"age\"].std()\ntrain_df[\"age\"] = train_df.loc[train_df[\"age\"].fillna(train_std, inplace = True)]\ntrain_df.age.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:24:44.770632Z","iopub.execute_input":"2024-05-20T19:24:44.771043Z","iopub.status.idle":"2024-05-20T19:24:46.108952Z","shell.execute_reply.started":"2024-05-20T19:24:44.771009Z","shell.execute_reply":"2024-05-20T19:24:46.107574Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_1064/1821249296.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_df[\"age\"] = train_df.loc[train_df[\"age\"].fillna(train_std, inplace = True)]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mindex.pyx:175\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/index_class_helper.pxi:70\u001b[0m, in \u001b[0;36mpandas._libs.index.Int64Engine._check_type\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: None","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[56], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m train_std \u001b[38;5;241m=\u001b[39m train_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mstd()\n\u001b[0;32m----> 2\u001b[0m train_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mtrain_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mage\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfillna\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_std\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minplace\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      3\u001b[0m train_df\u001b[38;5;241m.\u001b[39mage\u001b[38;5;241m.\u001b[39misnull()\u001b[38;5;241m.\u001b[39msum()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1191\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1189\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[1;32m   1190\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_deprecated_callable_usage(key, maybe_callable)\n\u001b[0;32m-> 1191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_getitem_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaybe_callable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1431\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1429\u001b[0m \u001b[38;5;66;03m# fall thru to straight lookup\u001b[39;00m\n\u001b[1;32m   1430\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[0;32m-> 1431\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_label\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1381\u001b[0m, in \u001b[0;36m_LocIndexer._get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_get_label\u001b[39m(\u001b[38;5;28mself\u001b[39m, label, axis: AxisInt):\n\u001b[1;32m   1380\u001b[0m     \u001b[38;5;66;03m# GH#5567 this will fail if the label is not present in the axis.\u001b[39;00m\n\u001b[0;32m-> 1381\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4301\u001b[0m, in \u001b[0;36mNDFrame.xs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   4299\u001b[0m             new_index \u001b[38;5;241m=\u001b[39m index[loc]\n\u001b[1;32m   4300\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4301\u001b[0m     loc \u001b[38;5;241m=\u001b[39m \u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4303\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(loc, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[1;32m   4304\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m loc\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mbool_:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: None"],"ename":"KeyError","evalue":"None","output_type":"error"}]},{"cell_type":"code","source":"test_std = test_df[\"age\"].std()\ntest_df[\"age\"] = test_df.loc[test_df[\"age\"].fillna(test_std, inplace = Tru)]\ntest_df[\"age\"].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:24:51.467917Z","iopub.execute_input":"2024-05-20T19:24:51.468308Z","iopub.status.idle":"2024-05-20T19:24:51.579764Z","shell.execute_reply.started":"2024-05-20T19:24:51.468279Z","shell.execute_reply":"2024-05-20T19:24:51.578353Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_1064/2687229845.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_df[\"age\"] = test_df.loc[test_df[\"age\"].fillna(test_std, inplace = True)]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mindex.pyx:175\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/index_class_helper.pxi:70\u001b[0m, in \u001b[0;36mpandas._libs.index.Int64Engine._check_type\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: None","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[57], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m test_std \u001b[38;5;241m=\u001b[39m test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mstd()\n\u001b[0;32m----> 2\u001b[0m test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mtest_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mtest_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mage\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfillna\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtest_std\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minplace\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      3\u001b[0m test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39misnull()\u001b[38;5;241m.\u001b[39msum()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1191\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1189\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[1;32m   1190\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_deprecated_callable_usage(key, maybe_callable)\n\u001b[0;32m-> 1191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_getitem_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaybe_callable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1431\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1429\u001b[0m \u001b[38;5;66;03m# fall thru to straight lookup\u001b[39;00m\n\u001b[1;32m   1430\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[0;32m-> 1431\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_label\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1381\u001b[0m, in \u001b[0;36m_LocIndexer._get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_get_label\u001b[39m(\u001b[38;5;28mself\u001b[39m, label, axis: AxisInt):\n\u001b[1;32m   1380\u001b[0m     \u001b[38;5;66;03m# GH#5567 this will fail if the label is not present in the axis.\u001b[39;00m\n\u001b[0;32m-> 1381\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4301\u001b[0m, in \u001b[0;36mNDFrame.xs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   4299\u001b[0m             new_index \u001b[38;5;241m=\u001b[39m index[loc]\n\u001b[1;32m   4300\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4301\u001b[0m     loc \u001b[38;5;241m=\u001b[39m \u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4303\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(loc, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[1;32m   4304\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m loc\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mbool_:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: None"],"ename":"KeyError","evalue":"None","output_type":"error"}]},{"cell_type":"code","source":"# data = [train_df, test_df]\n\n# for dataset in data:\n#     mean = train_df[\"age\"].mean()\n#     std = test_df[\"age\"].std()\n#     is_null = dataset[\"age\"].isnull().sum()\n#     # compute random numbers between the mean, std and is_null\n#     rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n#     # fill NaN values in Age column with random values generated\n#     age_slice = dataset[\"age\"].copy()\n#     age_slice[np.isnan(age_slice)] = rand_age\n#     dataset[\"age\"] = age_slice\n#     dataset[\"age\"] = dataset[\"age\"].astype(int)\n# #     dataset[\"Age\"] = train_df[\"Age\"].astype(int)\n    \n# print(train_df[\"age\"].isnull().sum())\n# print(\"---------------\")\n# print(test_df[\"age\"].isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.900902Z","iopub.status.idle":"2024-05-20T19:23:52.901328Z","shell.execute_reply.started":"2024-05-20T19:23:52.901123Z","shell.execute_reply":"2024-05-20T19:23:52.901146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# data = [test_df]\n\n# for dataset in data:\n#     std = dataset[\"age\"].std()\n#     # fill NaN values in Age column with random values generated\n#     dataset[\"age\"] = dataset[\"age\"].fillna(\"std\", inplace = True)\n#     dataset[\"age\"] = test_df[\"age\"].astype(int)\n    \n    \n    \n    \n# print(test_df[\"age\"].isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.90257Z","iopub.status.idle":"2024-05-20T19:23:52.902942Z","shell.execute_reply.started":"2024-05-20T19:23:52.902773Z","shell.execute_reply":"2024-05-20T19:23:52.902787Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df[\"age\"].isna().sum() + test_df[\"age\"].isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:25:29.045492Z","iopub.execute_input":"2024-05-20T19:25:29.045915Z","iopub.status.idle":"2024-05-20T19:25:29.053545Z","shell.execute_reply.started":"2024-05-20T19:25:29.045879Z","shell.execute_reply":"2024-05-20T19:25:29.052391Z"},"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"## embarked","metadata":{}},{"cell_type":"code","source":"train_df.loc[train_df[\"embarked\"].isna()]","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:25:56.709701Z","iopub.execute_input":"2024-05-20T19:25:56.710095Z","iopub.status.idle":"2024-05-20T19:25:56.726323Z","shell.execute_reply.started":"2024-05-20T19:25:56.710066Z","shell.execute_reply":"2024-05-20T19:25:56.725216Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"             survived  pclass                                       name  \\\npassengerid                                                                \n62                  1       1                        Icard, Miss. Amelie   \n830                 1       1  Stone, Mrs. George Nelson (Martha Evelyn)   \n\n                sex   age  sibsp  parch  ticket  fare embarked  num_family  \\\npassengerid                                                                  \n62           female  38.0      0      0  113572  80.0      NaN           0   \n830          female  62.0      0      0  113572  80.0      NaN           0   \n\n             with_family  deck  \npassengerid                     \n62                     0     2  \n830                    0     2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>pclass</th>\n      <th>name</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>ticket</th>\n      <th>fare</th>\n      <th>embarked</th>\n      <th>num_family</th>\n      <th>with_family</th>\n      <th>deck</th>\n    </tr>\n    <tr>\n      <th>passengerid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>62</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Icard, Miss. Amelie</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>113572</td>\n      <td>80.0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>830</th>\n      <td>1</td>\n      <td>1</td>\n      <td>Stone, Mrs. George Nelson (Martha Evelyn)</td>\n      <td>female</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>113572</td>\n      <td>80.0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.loc[test_df[\"embarked\"].isna()]","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:25:58.836623Z","iopub.execute_input":"2024-05-20T19:25:58.837048Z","iopub.status.idle":"2024-05-20T19:25:58.84894Z","shell.execute_reply.started":"2024-05-20T19:25:58.837016Z","shell.execute_reply":"2024-05-20T19:25:58.847839Z"},"trusted":true},"execution_count":60,"outputs":[{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"Empty DataFrame\nColumns: [pclass, name, sex, age, sibsp, parch, ticket, fare, embarked, num_family, with_family, deck]\nIndex: []","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pclass</th>\n      <th>name</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>ticket</th>\n      <th>fare</th>\n      <th>embarked</th>\n      <th>num_family</th>\n      <th>with_family</th>\n      <th>deck</th>\n    </tr>\n    <tr>\n      <th>passengerid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"common_value = \"S\"\n\ntrain_df[\"embarked\"] = train_df.loc[train_df[\"embarked\"].fillna(common_value, inplace = True)]\ntest_df[\"embarked\"] = test_df.loc[test_df[\"embarked\"].fillna(common_value, inplace = True)]","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:26:06.660587Z","iopub.execute_input":"2024-05-20T19:26:06.661661Z","iopub.status.idle":"2024-05-20T19:26:06.774675Z","shell.execute_reply.started":"2024-05-20T19:26:06.661623Z","shell.execute_reply":"2024-05-20T19:26:06.773494Z"},"trusted":true},"execution_count":61,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_1064/3866147196.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_df[\"embarked\"] = train_df.loc[train_df[\"embarked\"].fillna(common_value, inplace = True)]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mindex.pyx:175\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/index_class_helper.pxi:70\u001b[0m, in \u001b[0;36mpandas._libs.index.Int64Engine._check_type\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: None","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[61], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m common_value \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mS\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m----> 3\u001b[0m train_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124membarked\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mtrain_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43membarked\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfillna\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcommon_value\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minplace\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      4\u001b[0m test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124membarked\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m test_df\u001b[38;5;241m.\u001b[39mloc[test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124membarked\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mfillna(common_value, inplace \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m)]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1191\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1189\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[1;32m   1190\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_deprecated_callable_usage(key, maybe_callable)\n\u001b[0;32m-> 1191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_getitem_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaybe_callable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1431\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1429\u001b[0m \u001b[38;5;66;03m# fall thru to straight lookup\u001b[39;00m\n\u001b[1;32m   1430\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[0;32m-> 1431\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_label\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1381\u001b[0m, in \u001b[0;36m_LocIndexer._get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_get_label\u001b[39m(\u001b[38;5;28mself\u001b[39m, label, axis: AxisInt):\n\u001b[1;32m   1380\u001b[0m     \u001b[38;5;66;03m# GH#5567 this will fail if the label is not present in the axis.\u001b[39;00m\n\u001b[0;32m-> 1381\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4301\u001b[0m, in \u001b[0;36mNDFrame.xs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   4299\u001b[0m             new_index \u001b[38;5;241m=\u001b[39m index[loc]\n\u001b[1;32m   4300\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4301\u001b[0m     loc \u001b[38;5;241m=\u001b[39m \u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4303\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(loc, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[1;32m   4304\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m loc\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mbool_:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: None"],"ename":"KeyError","evalue":"None","output_type":"error"}]},{"cell_type":"markdown","source":"double checking if there are any missing values","metadata":{}},{"cell_type":"code","source":"train_df[\"embarked\"].isna().sum() + test_df[\"embarked\"].isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:26:11.184687Z","iopub.execute_input":"2024-05-20T19:26:11.185145Z","iopub.status.idle":"2024-05-20T19:26:11.193239Z","shell.execute_reply.started":"2024-05-20T19:26:11.18511Z","shell.execute_reply":"2024-05-20T19:26:11.192024Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"# Data Processing - converting categorical to numerical","metadata":{}},{"cell_type":"code","source":"# datatype of embarked was bool so changing to objext\n# train_df[\"embarked\"] = train_df[\"embarked\"].astype(object)\n\n# likewise, float to int for fare col\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['fare'] = dataset['fare'].fillna(0)\n    dataset['fare'] = dataset['fare'].astype(int)\n#     dataset['embarked'] = dataset['embarked'].astype(object)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:26:26.434148Z","iopub.execute_input":"2024-05-20T19:26:26.434531Z","iopub.status.idle":"2024-05-20T19:26:26.442086Z","shell.execute_reply.started":"2024-05-20T19:26:26.434502Z","shell.execute_reply":"2024-05-20T19:26:26.440811Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"# we have three cols with a categorical value\ncategorical_col = train_df.select_dtypes([\"object\"]).columns\n\ncategorical_col    ","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:26:31.331948Z","iopub.execute_input":"2024-05-20T19:26:31.332522Z","iopub.status.idle":"2024-05-20T19:26:31.340092Z","shell.execute_reply.started":"2024-05-20T19:26:31.332493Z","shell.execute_reply":"2024-05-20T19:26:31.338812Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"Index(['name', 'sex', 'ticket', 'embarked'], dtype='object')"},"metadata":{}}]},{"cell_type":"markdown","source":"## Name","metadata":{}},{"cell_type":"code","source":"train_df[\"name\"].head(10)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:26:34.080057Z","iopub.execute_input":"2024-05-20T19:26:34.080795Z","iopub.status.idle":"2024-05-20T19:26:34.087658Z","shell.execute_reply.started":"2024-05-20T19:26:34.080761Z","shell.execute_reply":"2024-05-20T19:26:34.086558Z"},"trusted":true},"execution_count":65,"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"passengerid\n1                               Braund, Mr. Owen Harris\n2     Cumings, Mrs. John Bradley (Florence Briggs Th...\n3                                Heikkinen, Miss. Laina\n4          Futrelle, Mrs. Jacques Heath (Lily May Peel)\n5                              Allen, Mr. William Henry\n6                                      Moran, Mr. James\n7                               McCarthy, Mr. Timothy J\n8                        Palsson, Master. Gosta Leonard\n9     Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)\n10                  Nasser, Mrs. Nicholas (Adele Achem)\nName: name, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"data = [train_df, test_df]\ntitles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n\nfor dataset in data:\n    # extract titles\n    # ([a-zA-Z]+) looks for series / a letter of alphabets but if itÂ´s with \\. \n    # ([A-Za-z]+)\\. finds a anything that has . followed by aplhabets, therefore a title    \n    dataset['title'] = dataset[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    dataset['title_extract'] = dataset[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # replace titles with a more common title or as Rare\n    dataset['title'] = dataset['title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\\\n                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['title'] = dataset['title'].replace('Mlle', 'Miss')\n    dataset['title'] = dataset['title'].replace('Ms', 'Miss')\n    dataset['title'] = dataset['title'].replace('Mme', 'Mrs')\n    # convert titles into numbers\n    dataset['title'] = dataset['title'].map(titles)\n    dataset['title_map'] = dataset['title'].map(titles)\n    # filling NaN with 0, just in case\n    dataset['title'] = dataset['title'].fillna(0)\n    \n# dropping name col\ntrain_df = train_df.drop(['name'], axis=1)\ntest_df = test_df.drop(['name'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:26:37.293976Z","iopub.execute_input":"2024-05-20T19:26:37.294427Z","iopub.status.idle":"2024-05-20T19:26:37.3347Z","shell.execute_reply.started":"2024-05-20T19:26:37.294383Z","shell.execute_reply":"2024-05-20T19:26:37.333597Z"},"trusted":true},"execution_count":66,"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"             pclass     sex        age  sibsp  parch              ticket  \\\npassengerid                                                                \n892               3    male  34.500000      0      0              330911   \n893               3  female  47.000000      1      0              363272   \n894               2    male  62.000000      0      0              240276   \n895               3    male  27.000000      0      0              315154   \n896               3  female  22.000000      1      1             3101298   \n...             ...     ...        ...    ...    ...                 ...   \n1305              3    male  14.181209      0      0           A.5. 3236   \n1306              1  female  39.000000      0      0            PC 17758   \n1307              3    male  38.500000      0      0  SOTON/O.Q. 3101262   \n1308              3    male  14.181209      0      0              359309   \n1309              3    male  14.181209      1      1                2668   \n\n             fare embarked  num_family  with_family  deck  title  \\\npassengerid                                                        \n892             7        Q           0            0     8      1   \n893             7        S           1            1     8      3   \n894             9        Q           0            0     8      1   \n895             8        S           0            0     8      1   \n896            12        S           2            1     8      3   \n...           ...      ...         ...          ...   ...    ...   \n1305            8        S           0            0     8      1   \n1306          108        C           0            0     3      5   \n1307            7        S           0            0     8      1   \n1308            8        S           0            0     8      1   \n1309           22        C           2            1     8      4   \n\n            title_extract  title_map  \npassengerid                           \n892                    Mr        NaN  \n893                   Mrs        NaN  \n894                    Mr        NaN  \n895                    Mr        NaN  \n896                   Mrs        NaN  \n...                   ...        ...  \n1305                   Mr        NaN  \n1306                 Dona        NaN  \n1307                   Mr        NaN  \n1308                   Mr        NaN  \n1309               Master        NaN  \n\n[418 rows x 14 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pclass</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>ticket</th>\n      <th>fare</th>\n      <th>embarked</th>\n      <th>num_family</th>\n      <th>with_family</th>\n      <th>deck</th>\n      <th>title</th>\n      <th>title_extract</th>\n      <th>title_map</th>\n    </tr>\n    <tr>\n      <th>passengerid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>3</td>\n      <td>male</td>\n      <td>34.500000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7</td>\n      <td>Q</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n      <td>Mr</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>893</th>\n      <td>3</td>\n      <td>female</td>\n      <td>47.000000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7</td>\n      <td>S</td>\n      <td>1</td>\n      <td>1</td>\n      <td>8</td>\n      <td>3</td>\n      <td>Mrs</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>894</th>\n      <td>2</td>\n      <td>male</td>\n      <td>62.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9</td>\n      <td>Q</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n      <td>Mr</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>895</th>\n      <td>3</td>\n      <td>male</td>\n      <td>27.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n      <td>Mr</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>896</th>\n      <td>3</td>\n      <td>female</td>\n      <td>22.000000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12</td>\n      <td>S</td>\n      <td>2</td>\n      <td>1</td>\n      <td>8</td>\n      <td>3</td>\n      <td>Mrs</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1305</th>\n      <td>3</td>\n      <td>male</td>\n      <td>14.181209</td>\n      <td>0</td>\n      <td>0</td>\n      <td>A.5. 3236</td>\n      <td>8</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n      <td>Mr</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1306</th>\n      <td>1</td>\n      <td>female</td>\n      <td>39.000000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17758</td>\n      <td>108</td>\n      <td>C</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>5</td>\n      <td>Dona</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1307</th>\n      <td>3</td>\n      <td>male</td>\n      <td>38.500000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>SOTON/O.Q. 3101262</td>\n      <td>7</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n      <td>Mr</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1308</th>\n      <td>3</td>\n      <td>male</td>\n      <td>14.181209</td>\n      <td>0</td>\n      <td>0</td>\n      <td>359309</td>\n      <td>8</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n      <td>Mr</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1309</th>\n      <td>3</td>\n      <td>male</td>\n      <td>14.181209</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2668</td>\n      <td>22</td>\n      <td>C</td>\n      <td>2</td>\n      <td>1</td>\n      <td>8</td>\n      <td>4</td>\n      <td>Master</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows Ã 14 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df['title_extract'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:28:01.598961Z","iopub.execute_input":"2024-05-20T19:28:01.599364Z","iopub.status.idle":"2024-05-20T19:28:01.608602Z","shell.execute_reply.started":"2024-05-20T19:28:01.599332Z","shell.execute_reply":"2024-05-20T19:28:01.607655Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"title_extract\nMr          517\nMiss        182\nMrs         125\nMaster       40\nDr            7\nRev           6\nMlle          2\nMajor         2\nCol           2\nCountess      1\nCapt          1\nMs            1\nSir           1\nLady          1\nMme           1\nDon           1\nJonkheer      1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df['title'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:28:03.432349Z","iopub.execute_input":"2024-05-20T19:28:03.432766Z","iopub.status.idle":"2024-05-20T19:28:03.44117Z","shell.execute_reply.started":"2024-05-20T19:28:03.432705Z","shell.execute_reply":"2024-05-20T19:28:03.439811Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"title\n1    517\n2    185\n3    126\n4     40\n5     23\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df = train_df.drop(columns = [\"title_extract\", \"title_map\"], axis = 1)\ntest_df = test_df.drop(columns = [\"title_extract\", \"title_map\"], axis= 1)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:28:25.046421Z","iopub.execute_input":"2024-05-20T19:28:25.047444Z","iopub.status.idle":"2024-05-20T19:28:25.963989Z","shell.execute_reply.started":"2024-05-20T19:28:25.047407Z","shell.execute_reply":"2024-05-20T19:28:25.96248Z"},"trusted":true},"execution_count":70,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[70], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m train_df \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtitle_extract\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtitle_map\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m test_df \u001b[38;5;241m=\u001b[39m test_df\u001b[38;5;241m.\u001b[39mdrop(columns \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtitle_extract\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtitle_map\u001b[39m\u001b[38;5;124m\"\u001b[39m], axis\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:5581\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5433\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(\n\u001b[1;32m   5434\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   5435\u001b[0m     labels: IndexLabel \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5442\u001b[0m     errors: IgnoreRaise \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   5443\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5444\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   5445\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   5446\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5579\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   5580\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 5581\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   5582\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5583\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5584\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5585\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5586\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5587\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5588\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5589\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4788\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4787\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4788\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4790\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4791\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4830\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4829\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4830\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4831\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4833\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4834\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:7070\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   7069\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 7070\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlabels[mask]\u001b[38;5;241m.\u001b[39mtolist()\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   7071\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   7072\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n","\u001b[0;31mKeyError\u001b[0m: \"['title_extract', 'title_map'] not found in axis\""],"ename":"KeyError","evalue":"\"['title_extract', 'title_map'] not found in axis\"","output_type":"error"}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:28:30.366825Z","iopub.execute_input":"2024-05-20T19:28:30.367206Z","iopub.status.idle":"2024-05-20T19:28:30.382611Z","shell.execute_reply.started":"2024-05-20T19:28:30.367176Z","shell.execute_reply":"2024-05-20T19:28:30.380893Z"},"trusted":true},"execution_count":71,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 891 entries, 1 to 891\nData columns (total 13 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   survived     891 non-null    int64  \n 1   pclass       891 non-null    int64  \n 2   sex          891 non-null    object \n 3   age          891 non-null    float64\n 4   sibsp        891 non-null    int64  \n 5   parch        891 non-null    int64  \n 6   ticket       891 non-null    object \n 7   fare         891 non-null    int64  \n 8   embarked     891 non-null    object \n 9   num_family   891 non-null    int64  \n 10  with_family  891 non-null    int64  \n 11  deck         891 non-null    int64  \n 12  title        891 non-null    int64  \ndtypes: float64(1), int64(9), object(3)\nmemory usage: 97.5+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:28:41.011986Z","iopub.execute_input":"2024-05-20T19:28:41.012371Z","iopub.status.idle":"2024-05-20T19:28:41.025678Z","shell.execute_reply.started":"2024-05-20T19:28:41.012341Z","shell.execute_reply":"2024-05-20T19:28:41.024594Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 418 entries, 892 to 1309\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   pclass       418 non-null    int64  \n 1   sex          418 non-null    object \n 2   age          418 non-null    float64\n 3   sibsp        418 non-null    int64  \n 4   parch        418 non-null    int64  \n 5   ticket       418 non-null    object \n 6   fare         418 non-null    int64  \n 7   embarked     418 non-null    object \n 8   num_family   418 non-null    int64  \n 9   with_family  418 non-null    int64  \n 10  deck         418 non-null    int64  \n 11  title        418 non-null    int64  \ndtypes: float64(1), int64(8), object(3)\nmemory usage: 42.5+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## sex","metadata":{}},{"cell_type":"code","source":"genders = {\"male\": 0, \"female\": 1}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['sex'] = dataset['sex'].map(genders)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:28:58.246638Z","iopub.execute_input":"2024-05-20T19:28:58.247516Z","iopub.status.idle":"2024-05-20T19:28:58.254595Z","shell.execute_reply.started":"2024-05-20T19:28:58.247449Z","shell.execute_reply":"2024-05-20T19:28:58.253584Z"},"trusted":true},"execution_count":73,"outputs":[]},{"cell_type":"markdown","source":"## Ticket","metadata":{}},{"cell_type":"code","source":"train_df['ticket'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:29:05.52171Z","iopub.execute_input":"2024-05-20T19:29:05.52266Z","iopub.status.idle":"2024-05-20T19:29:05.532371Z","shell.execute_reply.started":"2024-05-20T19:29:05.52262Z","shell.execute_reply":"2024-05-20T19:29:05.531337Z"},"trusted":true},"execution_count":74,"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"ticket\n347082      7\nCA. 2343    7\n1601        7\n3101295     6\nCA 2144     6\n           ..\n9234        1\n19988       1\n2693        1\nPC 17612    1\n370376      1\nName: count, Length: 681, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df['ticket'].describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:29:07.425683Z","iopub.execute_input":"2024-05-20T19:29:07.426109Z","iopub.status.idle":"2024-05-20T19:29:07.437127Z","shell.execute_reply.started":"2024-05-20T19:29:07.426078Z","shell.execute_reply":"2024-05-20T19:29:07.436153Z"},"trusted":true},"execution_count":75,"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"count        891\nunique       681\ntop       347082\nfreq           7\nName: ticket, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"train_df = train_df.drop(columns=[\"ticket\"], axis=1)\ntrain_df\n\ntest_df = test_df.drop(columns=[\"ticket\"], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:29:11.532157Z","iopub.execute_input":"2024-05-20T19:29:11.532558Z","iopub.status.idle":"2024-05-20T19:29:11.53969Z","shell.execute_reply.started":"2024-05-20T19:29:11.532528Z","shell.execute_reply":"2024-05-20T19:29:11.538798Z"},"trusted":true},"execution_count":76,"outputs":[]},{"cell_type":"markdown","source":"## embarked","metadata":{}},{"cell_type":"code","source":"ports = {\"S\": 0, \"C\": 1, \"Q\": 2}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['embarked'] = dataset['embarked'].map(ports)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:29:20.903296Z","iopub.execute_input":"2024-05-20T19:29:20.903671Z","iopub.status.idle":"2024-05-20T19:29:20.911032Z","shell.execute_reply.started":"2024-05-20T19:29:20.903643Z","shell.execute_reply":"2024-05-20T19:29:20.909828Z"},"trusted":true},"execution_count":77,"outputs":[]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:29:23.710338Z","iopub.execute_input":"2024-05-20T19:29:23.71075Z","iopub.status.idle":"2024-05-20T19:29:23.723812Z","shell.execute_reply.started":"2024-05-20T19:29:23.710702Z","shell.execute_reply":"2024-05-20T19:29:23.722406Z"},"trusted":true},"execution_count":78,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 891 entries, 1 to 891\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   survived     891 non-null    int64  \n 1   pclass       891 non-null    int64  \n 2   sex          891 non-null    int64  \n 3   age          891 non-null    float64\n 4   sibsp        891 non-null    int64  \n 5   parch        891 non-null    int64  \n 6   fare         891 non-null    int64  \n 7   embarked     891 non-null    int64  \n 8   num_family   891 non-null    int64  \n 9   with_family  891 non-null    int64  \n 10  deck         891 non-null    int64  \n 11  title        891 non-null    int64  \ndtypes: float64(1), int64(11)\nmemory usage: 90.5 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:29:39.083492Z","iopub.execute_input":"2024-05-20T19:29:39.084571Z","iopub.status.idle":"2024-05-20T19:29:39.096488Z","shell.execute_reply.started":"2024-05-20T19:29:39.084519Z","shell.execute_reply":"2024-05-20T19:29:39.094757Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 418 entries, 892 to 1309\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   pclass       418 non-null    int64  \n 1   sex          418 non-null    int64  \n 2   age          418 non-null    float64\n 3   sibsp        418 non-null    int64  \n 4   parch        418 non-null    int64  \n 5   fare         418 non-null    int64  \n 6   embarked     418 non-null    int64  \n 7   num_family   418 non-null    int64  \n 8   with_family  418 non-null    int64  \n 9   deck         418 non-null    int64  \n 10  title        418 non-null    int64  \ndtypes: float64(1), int64(10)\nmemory usage: 39.2 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"# changing the datatype of age to int\n\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset[\"age\"] = dataset[\"age\"].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:32:23.8617Z","iopub.execute_input":"2024-05-20T19:32:23.862106Z","iopub.status.idle":"2024-05-20T19:32:23.869114Z","shell.execute_reply.started":"2024-05-20T19:32:23.862078Z","shell.execute_reply":"2024-05-20T19:32:23.86721Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:32:47.835893Z","iopub.execute_input":"2024-05-20T19:32:47.836272Z","iopub.status.idle":"2024-05-20T19:32:47.851171Z","shell.execute_reply.started":"2024-05-20T19:32:47.836242Z","shell.execute_reply":"2024-05-20T19:32:47.84972Z"},"trusted":true},"execution_count":83,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 418 entries, 892 to 1309\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   pclass       418 non-null    int64\n 1   sex          418 non-null    int64\n 2   age          418 non-null    int64\n 3   sibsp        418 non-null    int64\n 4   parch        418 non-null    int64\n 5   fare         418 non-null    int64\n 6   embarked     418 non-null    int64\n 7   num_family   418 non-null    int64\n 8   with_family  418 non-null    int64\n 9   deck         418 non-null    int64\n 10  title        418 non-null    int64\ndtypes: int64(11)\nmemory usage: 39.2 KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# remapping the heatmap","metadata":{}},{"cell_type":"code","source":"train_heat = train_df.copy()\n\ntrain_heat = train_heat.drop(columns = [\"sibsp\", \"parch\", \"with_family\"], axis = 1)\ntrain_heat_corr = train_heat.corr()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:33:08.919144Z","iopub.execute_input":"2024-05-20T19:33:08.920371Z","iopub.status.idle":"2024-05-20T19:33:08.92663Z","shell.execute_reply.started":"2024-05-20T19:33:08.920323Z","shell.execute_reply":"2024-05-20T19:33:08.925608Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 8))\nsns.heatmap(train_heat_corr, annot=True, cmap='coolwarm', linewidths=0.5)\n\n# Add a title\nplt.title('Correlation Heatmap')\n\n# Display the heatmap\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:33:11.000007Z","iopub.execute_input":"2024-05-20T19:33:11.000377Z","iopub.status.idle":"2024-05-20T19:33:11.575237Z","shell.execute_reply.started":"2024-05-20T19:33:11.000349Z","shell.execute_reply":"2024-05-20T19:33:11.573905Z"},"trusted":true},"execution_count":85,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":".stop running code here","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:23:52.952331Z","iopub.status.idle":"2024-05-20T19:23:52.95311Z","shell.execute_reply.started":"2024-05-20T19:23:52.952889Z","shell.execute_reply":"2024-05-20T19:23:52.952905Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Building models","metadata":{}},{"cell_type":"code","source":"X_train = train_df.drop(\"survived\", axis=1)\nY_train = train_df[\"survived\"]\nX_test  = test_df","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:34:28.760942Z","iopub.execute_input":"2024-05-20T19:34:28.761365Z","iopub.status.idle":"2024-05-20T19:34:28.768372Z","shell.execute_reply.started":"2024-05-20T19:34:28.761329Z","shell.execute_reply":"2024-05-20T19:34:28.767105Z"},"trusted":true},"execution_count":88,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Random Forest","metadata":{}},{"cell_type":"code","source":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nreslt_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:44:12.416988Z","iopub.execute_input":"2024-05-20T19:44:12.417385Z","iopub.status.idle":"2024-05-20T19:44:12.701129Z","shell.execute_reply.started":"2024-05-20T19:44:12.417356Z","shell.execute_reply":"2024-05-20T19:44:12.700202Z"},"trusted":true},"execution_count":99,"outputs":[]},{"cell_type":"markdown","source":"# Logistic Regresseion","metadata":{}},{"cell_type":"code","source":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nreslt_log = round(logreg.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:44:14.325558Z","iopub.execute_input":"2024-05-20T19:44:14.325983Z","iopub.status.idle":"2024-05-20T19:44:14.379037Z","shell.execute_reply.started":"2024-05-20T19:44:14.325949Z","shell.execute_reply":"2024-05-20T19:44:14.377786Z"},"trusted":true},"execution_count":100,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Gaussian Naive Bayes:","metadata":{}},{"cell_type":"code","source":"gaussian = GaussianNB() \ngaussian.fit(X_train, Y_train)  \n\nY_pred = gaussian.predict(X_test)  \n\nreslt_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:44:31.943427Z","iopub.execute_input":"2024-05-20T19:44:31.943884Z","iopub.status.idle":"2024-05-20T19:44:31.960871Z","shell.execute_reply.started":"2024-05-20T19:44:31.94385Z","shell.execute_reply":"2024-05-20T19:44:31.959531Z"},"trusted":true},"execution_count":102,"outputs":[]},{"cell_type":"markdown","source":"# KNN","metadata":{}},{"cell_type":"code","source":"knn = KNeighborsClassifier(n_neighbors = 3) \nknn.fit(X_train, Y_train)  \n\nY_pred = knn.predict(X_test)  \n\nreslt_knn = round(knn.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:44:35.944066Z","iopub.execute_input":"2024-05-20T19:44:35.944461Z","iopub.status.idle":"2024-05-20T19:44:36.026514Z","shell.execute_reply.started":"2024-05-20T19:44:35.94443Z","shell.execute_reply":"2024-05-20T19:44:36.025426Z"},"trusted":true},"execution_count":103,"outputs":[]},{"cell_type":"markdown","source":"# Decision tree","metadata":{}},{"cell_type":"code","source":"decision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train, Y_train)  \n\nY_pred = decision_tree.predict(X_test)  \n\nreslt_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:44:39.484772Z","iopub.execute_input":"2024-05-20T19:44:39.485173Z","iopub.status.idle":"2024-05-20T19:44:39.502086Z","shell.execute_reply.started":"2024-05-20T19:44:39.485141Z","shell.execute_reply":"2024-05-20T19:44:39.500834Z"},"trusted":true},"execution_count":104,"outputs":[]},{"cell_type":"markdown","source":"# Result","metadata":{}},{"cell_type":"code","source":"results = pd.DataFrame({\n    'Model': ['Random Forest', \n              'Logistic Regression', \n              'Gaussian Naive Bayes',\n              'KNN', \n              'Decision Tree'],\n    'Score': [reslt_random_forest, \n              reslt_log,\n              reslt_gaussian, \n              reslt_knn, \n              reslt_decision_tree]\n})\n\nresult_df = results.sort_values(by='Score', ascending=False)\n\nresult_df","metadata":{"execution":{"iopub.status.busy":"2024-05-20T19:49:10.285798Z","iopub.execute_input":"2024-05-20T19:49:10.286233Z","iopub.status.idle":"2024-05-20T19:49:10.300255Z","shell.execute_reply.started":"2024-05-20T19:49:10.2862Z","shell.execute_reply":"2024-05-20T19:49:10.298792Z"},"trusted":true},"execution_count":108,"outputs":[{"execution_count":108,"output_type":"execute_result","data":{"text/plain":"                  Model  Score\n0         Random Forest  97.31\n4         Decision Tree  97.31\n3                   KNN  84.62\n1   Logistic Regression  81.14\n2  Gaussian Naive Bayes  78.56","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Random Forest</td>\n      <td>97.31</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Decision Tree</td>\n      <td>97.31</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>KNN</td>\n      <td>84.62</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Logistic Regression</td>\n      <td>81.14</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Gaussian Naive Bayes</td>\n      <td>78.56</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}