{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/hayatesato95/titanic-survivor-prediction-model-siegess-ule?scriptVersionId=178874599\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing\n\n# visualisation \nimport seaborn as sns \n%matplotlib inline \nfrom matplotlib import pyplot as plt\nfrom matplotlib import pyplot as stlye\n\nimport plotly.graph_objs as go # bar and pie charts, Plotly\n\n\n# datamining / Algorithm\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:08.952922Z","iopub.execute_input":"2024-05-21T07:45:08.953685Z","iopub.status.idle":"2024-05-21T07:45:10.061569Z","shell.execute_reply.started":"2024-05-21T07:45:08.953651Z","shell.execute_reply":"2024-05-21T07:45:10.060424Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"# 0. Loading Data","metadata":{}},{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.067785Z","iopub.execute_input":"2024-05-21T07:45:10.068175Z","iopub.status.idle":"2024-05-21T07:45:10.076195Z","shell.execute_reply.started":"2024-05-21T07:45:10.06814Z","shell.execute_reply":"2024-05-21T07:45:10.075117Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ngender_df = pd.read_csv(\"/kaggle/input/titanic/gender_submission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.077989Z","iopub.execute_input":"2024-05-21T07:45:10.078418Z","iopub.status.idle":"2024-05-21T07:45:10.098148Z","shell.execute_reply.started":"2024-05-21T07:45:10.078364Z","shell.execute_reply":"2024-05-21T07:45:10.096947Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"# 1. Data Understanding ","metadata":{}},{"cell_type":"code","source":"print(train_df.info())\nprint(\"\\n--------------------------------------------------------------------\\n\")\nprint(test_df.info())\nprint(\"\\n--------------------------------------------------------------------\\n\")\nprint(gender_df.info())","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.101457Z","iopub.execute_input":"2024-05-21T07:45:10.102453Z","iopub.status.idle":"2024-05-21T07:45:10.126563Z","shell.execute_reply.started":"2024-05-21T07:45:10.102411Z","shell.execute_reply":"2024-05-21T07:45:10.125442Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\n\n--------------------------------------------------------------------\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  418 non-null    int64  \n 1   Pclass       418 non-null    int64  \n 2   Name         418 non-null    object \n 3   Sex          418 non-null    object \n 4   Age          332 non-null    float64\n 5   SibSp        418 non-null    int64  \n 6   Parch        418 non-null    int64  \n 7   Ticket       418 non-null    object \n 8   Fare         417 non-null    float64\n 9   Cabin        91 non-null     object \n 10  Embarked     418 non-null    object \ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\nNone\n\n--------------------------------------------------------------------\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   PassengerId  418 non-null    int64\n 1   Survived     418 non-null    int64\ndtypes: int64(2)\nmemory usage: 6.7 KB\nNone\n","output_type":"stream"}]},{"cell_type":"markdown","source":"- you have to change the categorical values to numerical \n- be careful with float data and int data\n\n- test_df dose not have the survived col ","metadata":{}},{"cell_type":"code","source":"# Make all column names lowercase. \ntrain_df.rename(columns={column: column.lower() for column in train_df.columns}, inplace=True)\nprint(train_df.columns)\n\nprint(\"=============================================================\")\n\ntest_df.rename(columns={column: column.lower() for column in test_df.columns}, inplace=True)\nprint(test_df.columns)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.127867Z","iopub.execute_input":"2024-05-21T07:45:10.128188Z","iopub.status.idle":"2024-05-21T07:45:10.141353Z","shell.execute_reply.started":"2024-05-21T07:45:10.128161Z","shell.execute_reply":"2024-05-21T07:45:10.139841Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Index(['passengerid', 'survived', 'pclass', 'name', 'sex', 'age', 'sibsp',\n       'parch', 'ticket', 'fare', 'cabin', 'embarked'],\n      dtype='object')\n=============================================================\nIndex(['passengerid', 'pclass', 'name', 'sex', 'age', 'sibsp', 'parch',\n       'ticket', 'fare', 'cabin', 'embarked'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"# Use PassengerId as index\ntrain_df = train_df.set_index(\"passengerid\")\ntrain_df.head(1)\n\ntest_df = test_df.set_index(\"passengerid\")\ntest_df.head(1)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.142829Z","iopub.execute_input":"2024-05-21T07:45:10.143249Z","iopub.status.idle":"2024-05-21T07:45:10.16452Z","shell.execute_reply.started":"2024-05-21T07:45:10.143216Z","shell.execute_reply":"2024-05-21T07:45:10.163448Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"             pclass              name   sex   age  sibsp  parch  ticket  \\\npassengerid                                                               \n892               3  Kelly, Mr. James  male  34.5      0      0  330911   \n\n               fare cabin embarked  \npassengerid                         \n892          7.8292   NaN        Q  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pclass</th>\n      <th>name</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>ticket</th>\n      <th>fare</th>\n      <th>cabin</th>\n      <th>embarked</th>\n    </tr>\n    <tr>\n      <th>passengerid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# summarising the given dataset\ncolumns = train_df.columns\ncolumns = pd.Series(columns)\n\ndescription = [\"survival result\", \"rank of the tickets 1 - 3\", \"passengerÂ´s name\", \"sex of the passenger\", \"age of the passenger\", \"the num of siblings/spouses on the board\", \"the num of parents/children on the board\", \"ticker number\", \"price of the ticket\", \"cabin number\", \"port of embarkation\" ]\ndescription = pd.Series(description)\n\ndata_overview = pd.concat([columns, description], axis = 1, keys = [\"column name\", \"description\"])\ndata_overview","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.16586Z","iopub.execute_input":"2024-05-21T07:45:10.166156Z","iopub.status.idle":"2024-05-21T07:45:10.181025Z","shell.execute_reply.started":"2024-05-21T07:45:10.166132Z","shell.execute_reply":"2024-05-21T07:45:10.18009Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   column name                               description\n0     survived                           survival result\n1       pclass                 rank of the tickets 1 - 3\n2         name                          passengerÂ´s name\n3          sex                      sex of the passenger\n4          age                      age of the passenger\n5        sibsp  the num of siblings/spouses on the board\n6        parch  the num of parents/children on the board\n7       ticket                             ticker number\n8         fare                       price of the ticket\n9        cabin                              cabin number\n10    embarked                       port of embarkation","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column name</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>survived</td>\n      <td>survival result</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>pclass</td>\n      <td>rank of the tickets 1 - 3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>name</td>\n      <td>passengerÂ´s name</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>sex</td>\n      <td>sex of the passenger</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>age</td>\n      <td>age of the passenger</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>sibsp</td>\n      <td>the num of siblings/spouses on the board</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>parch</td>\n      <td>the num of parents/children on the board</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>ticket</td>\n      <td>ticker number</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>fare</td>\n      <td>price of the ticket</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>cabin</td>\n      <td>cabin number</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>embarked</td>\n      <td>port of embarkation</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# statistical summary\ntrain_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.18249Z","iopub.execute_input":"2024-05-21T07:45:10.182808Z","iopub.status.idle":"2024-05-21T07:45:10.208828Z","shell.execute_reply.started":"2024-05-21T07:45:10.182783Z","shell.execute_reply":"2024-05-21T07:45:10.208022Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"         survived      pclass         age       sibsp       parch        fare\ncount  891.000000  891.000000  714.000000  891.000000  891.000000  891.000000\nmean     0.383838    2.308642   29.699118    0.523008    0.381594   32.204208\nstd      0.486592    0.836071   14.526497    1.102743    0.806057   49.693429\nmin      0.000000    1.000000    0.420000    0.000000    0.000000    0.000000\n25%      0.000000    2.000000   20.125000    0.000000    0.000000    7.910400\n50%      0.000000    3.000000   28.000000    0.000000    0.000000   14.454200\n75%      1.000000    3.000000   38.000000    1.000000    0.000000   31.000000\nmax      1.000000    3.000000   80.000000    8.000000    6.000000  512.329200","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>survived</th>\n      <th>pclass</th>\n      <th>age</th>\n      <th>sibsp</th>\n      <th>parch</th>\n      <th>fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"survival rate is 38% ","metadata":{}},{"cell_type":"code","source":"# missing value\nmissing_value_counts = train_df.isnull().sum()\nmissing_col_and_counts = missing_value_counts[missing_value_counts > 0]\n\n\nprint(missing_col_and_counts)\n\nmissing_percentage = train_df.isnull().sum() / len(train_df) * 100\nmissing_percentage = round(missing_percentage, 2)\n\nprint(\"\\n--------------------------------------------------------------------\\n\")\nmissing_summary = pd.concat([missing_col_and_counts,missing_percentage], axis = 1, keys = [\"counts\", \"%\"])\n# print(missing_summary)\nmissing_summary","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.212116Z","iopub.execute_input":"2024-05-21T07:45:10.213042Z","iopub.status.idle":"2024-05-21T07:45:10.231617Z","shell.execute_reply.started":"2024-05-21T07:45:10.213009Z","shell.execute_reply":"2024-05-21T07:45:10.230788Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"age         177\ncabin       687\nembarked      2\ndtype: int64\n\n--------------------------------------------------------------------\n\n","output_type":"stream"},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"          counts      %\nage        177.0  19.87\ncabin      687.0  77.10\nembarked     2.0   0.22\nsurvived     NaN   0.00\npclass       NaN   0.00\nname         NaN   0.00\nsex          NaN   0.00\nsibsp        NaN   0.00\nparch        NaN   0.00\nticket       NaN   0.00\nfare         NaN   0.00","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>counts</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>age</th>\n      <td>177.0</td>\n      <td>19.87</td>\n    </tr>\n    <tr>\n      <th>cabin</th>\n      <td>687.0</td>\n      <td>77.10</td>\n    </tr>\n    <tr>\n      <th>embarked</th>\n      <td>2.0</td>\n      <td>0.22</td>\n    </tr>\n    <tr>\n      <th>survived</th>\n      <td>NaN</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>pclass</th>\n      <td>NaN</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>name</th>\n      <td>NaN</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>sex</th>\n      <td>NaN</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>sibsp</th>\n      <td>NaN</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>parch</th>\n      <td>NaN</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>ticket</th>\n      <td>NaN</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>fare</th>\n      <td>NaN</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"- age --> impute\n* Cabin --> discard\n- emnarked --> impute","metadata":{}},{"cell_type":"markdown","source":"# Overview","metadata":{}},{"cell_type":"code","source":"# Select only the numerical columns\nnumerical_df = train_df.select_dtypes(include=['number'])\n\ncorrelation_matrix = numerical_df.corr()\n\n# Create a heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n\n# Add a title\nplt.title('Correlation Heatmap')\n\n# Display the heatmap\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.23281Z","iopub.execute_input":"2024-05-21T07:45:10.23315Z","iopub.status.idle":"2024-05-21T07:45:10.665067Z","shell.execute_reply.started":"2024-05-21T07:45:10.233115Z","shell.execute_reply":"2024-05-21T07:45:10.664274Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Age and Sex","metadata":{}},{"cell_type":"code","source":"# setting variable name for survived col\nsurvived = \"survived\"\nnot_survived = \"not_survived\"\n\n# setting variable name for sex col\nwomen = train_df[ train_df[\"sex\"] == \"female\" ]\nmen = train_df[ train_df[\"sex\"] == \"male\" ]\n\n# visualisation for female \nfig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (10, 4)) # showing two graph next to each other\nax = sns.distplot(women[ women[\"survived\"] == 1 ][\"age\"].dropna(), # visualising survived x women\n                  bins = 18,\n                  label = survived, \n                  ax = axes[0], \n                  kde = False\n                 )\nax = sns.distplot(women[ women[\"survived\"] == 0 ][\"age\"].dropna(),  # visualising not survived x women\n                  bins = 40,\n                  label = survived, \n                  ax = axes[0], \n                  kde = False\n                 )\nax.legend()\nax.set_title(\"Female\")\n\n\n# visualisation for male \n# plt.subplots(nrows = 1, ncols = 2, figsize = (10, 4)) # showing two graph next to each other\nax = sns.distplot(men[ men[\"survived\"] == 1 ][\"age\"].dropna(), # visualising survived x men\n                  bins = 18,\n                  label = survived, \n                  ax = axes[1], \n                  kde = False\n                 )\nax = sns.distplot(men[ men[\"survived\"] == 0 ][\"age\"].dropna(),  # visualising not survived x men\n                  bins = 40,\n                  label = survived, \n                  ax = axes[1], \n                  kde = False\n                 )\nax.legend()\nax.set_title(\"Male\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:10.666203Z","iopub.execute_input":"2024-05-21T07:45:10.666769Z","iopub.status.idle":"2024-05-21T07:45:11.418348Z","shell.execute_reply.started":"2024-05-21T07:45:10.666738Z","shell.execute_reply":"2024-05-21T07:45:11.417173Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_807/3687846384.py:11: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  ax = sns.distplot(women[ women[\"survived\"] == 1 ][\"age\"].dropna(), # visualising survived x women\n/tmp/ipykernel_807/3687846384.py:17: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  ax = sns.distplot(women[ women[\"survived\"] == 0 ][\"age\"].dropna(),  # visualising not survived x women\n/tmp/ipykernel_807/3687846384.py:29: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  ax = sns.distplot(men[ men[\"survived\"] == 1 ][\"age\"].dropna(), # visualising survived x men\n/tmp/ipykernel_807/3687846384.py:35: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  ax = sns.distplot(men[ men[\"survived\"] == 0 ][\"age\"].dropna(),  # visualising not survived x men\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Male')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- female has higher chance of survival \n- however, for the children under 5 years old male has higher number","metadata":{}},{"cell_type":"markdown","source":"# Embarked, pclass, sex","metadata":{}},{"cell_type":"code","source":"# survived = 1 is survivors\n\ngrid = sns.FacetGrid(data=train_df, \n                     hue='survived', \n                     row='pclass', \n                     col=\"embarked\",\n                     aspect=1.6\n                    )\n\ngrid.map(plt.hist, 'age', \n         alpha=.5, \n         bins=20\n        )\n\ngrid.add_legend();","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:11.420025Z","iopub.execute_input":"2024-05-21T07:45:11.420688Z","iopub.status.idle":"2024-05-21T07:45:15.699072Z","shell.execute_reply.started":"2024-05-21T07:45:11.420636Z","shell.execute_reply":"2024-05-21T07:45:15.697764Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1510.49x900 with 9 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- most people embarked at S while barely anyone got on board at Q\n- the higher the class is, the higher the chance of survival is too \n- however, people with the ticket of class 3 who got on aborad at S has the highest number of non-survival","metadata":{}},{"cell_type":"markdown","source":"# pclass and survived","metadata":{}},{"cell_type":"code","source":"sns.barplot(x='pclass', \n            y='survived', \n            data=train_df\n           )","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:15.703675Z","iopub.execute_input":"2024-05-21T07:45:15.704052Z","iopub.status.idle":"2024-05-21T07:45:15.999571Z","shell.execute_reply.started":"2024-05-21T07:45:15.704023Z","shell.execute_reply":"2024-05-21T07:45:15.998396Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='pclass', ylabel='survived'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- class 1 has the highest survival cases","metadata":{}},{"cell_type":"code","source":"# survived = 1 is survivors\ngrid = sns.FacetGrid(data = train_df, \n                     hue=\"survived\",\n                     col='pclass', \n                     aspect=1.6\n                    )\n\ngrid.map(plt.hist, 'age', \n         alpha=.5, \n         bins=20\n        )\n\ngrid.add_legend();","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:16.000817Z","iopub.execute_input":"2024-05-21T07:45:16.001154Z","iopub.status.idle":"2024-05-21T07:45:17.351558Z","shell.execute_reply.started":"2024-05-21T07:45:16.001127Z","shell.execute_reply":"2024-05-21T07:45:17.350426Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1510.49x300 with 3 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- age up to 40 has higher survival rate\n- ","metadata":{}},{"cell_type":"code","source":"# creating a new column \"family\" for the number of family\ntrain_df[\"num_family\"] = train_df[\"sibsp\"] + train_df[\"parch\"]\ntest_df[\"num_family\"] = test_df[\"sibsp\"] + test_df[\"parch\"]\n\n# creating a new column \"with_family\" and marking as 1 if the passenger is not alone\ndata = [train_df, test_df]\nfor dataset in data:\n    dataset.loc[dataset[\"num_family\"] > 0, 'with_family'] = 1\n    dataset.loc[dataset[\"num_family\"] == 0, 'with_family'] = 0\n    dataset['with_family'] = dataset['with_family'].astype(int)\n\n# chacking the number\nprint(train_df[\"with_family\"].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:17.353258Z","iopub.execute_input":"2024-05-21T07:45:17.353976Z","iopub.status.idle":"2024-05-21T07:45:17.369395Z","shell.execute_reply.started":"2024-05-21T07:45:17.353925Z","shell.execute_reply":"2024-05-21T07:45:17.368214Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"with_family\n0    537\n1    354\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"- 537 people are without any other family memeber","metadata":{}},{"cell_type":"code","source":"sns.barplot(x=\"pclass\", y=\"num_family\", data=train_df)\n\n# comparing the survival \ngrid = sns.FacetGrid(data=train_df, \n                     hue = \"survived\",\n                     row = \"sex\",\n                     col = \"pclass\",\n                     aspect=1.6\n                    )\n\ngrid.map(plt.hist,\n         \"num_family\",\n         alpha = .5,\n        bins = 20)\ngrid.add_legend();","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:17.370933Z","iopub.execute_input":"2024-05-21T07:45:17.371653Z","iopub.status.idle":"2024-05-21T07:45:20.487316Z","shell.execute_reply.started":"2024-05-21T07:45:17.371613Z","shell.execute_reply":"2024-05-21T07:45:20.486154Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1510.49x600 with 6 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"- class 3 had the highest num of family member on the ship\n- generally, the less family member the higher survival cases","metadata":{}},{"cell_type":"code","source":"axes = sns.catplot(y=\"num_family\",\n                   x=\"survived\",\n                   data=train_df, \n                   aspect = 2.5, )","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.489643Z","iopub.execute_input":"2024-05-21T07:45:20.490098Z","iopub.status.idle":"2024-05-21T07:45:20.833428Z","shell.execute_reply.started":"2024-05-21T07:45:20.490058Z","shell.execute_reply":"2024-05-21T07:45:20.83231Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n  data_subset = grouped_data.get_group(pd_key)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1250x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Data Processing - filling NA","metadata":{}},{"cell_type":"markdown","source":"## Cabin","metadata":{}},{"cell_type":"code","source":"print(train_df[\"cabin\"].describe())\n\ntrain_df[\"cabin\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.835309Z","iopub.execute_input":"2024-05-21T07:45:20.836107Z","iopub.status.idle":"2024-05-21T07:45:20.849078Z","shell.execute_reply.started":"2024-05-21T07:45:20.836067Z","shell.execute_reply":"2024-05-21T07:45:20.847911Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"count         204\nunique        147\ntop       B96 B98\nfreq            4\nName: cabin, dtype: object\n","output_type":"stream"},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"array([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n       'C148'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"# converting the cabin info into numeric \n\nimport re\ndeck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    # filling a missing value with \"U0\"\n    dataset['cabin'] = dataset['cabin'].fillna(\"U0\")\n    \n    # fidning alphabet letter from the \"cabin\" column \n    # .serach(x) looks for the the first occurrence of one or more letters in each value  \n    # .group() then extracts the letter of the first occurance / anything found by .search() method\n    dataset['deck'] = dataset['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n    # replacing the aplhabet with a number as per Deck dictionary\n    dataset['deck'] = dataset['deck'].map(deck)\n    # in case of remaining missing value, you replace with 0\n    dataset['deck'] = dataset['deck'].fillna(0)\n    # changing the value into intger\n    dataset['deck'] = dataset['deck'].astype(int)\n\n\n# dropping cabin column\ntrain_df = train_df.drop([\"cabin\"], axis=1)\ntest_df = test_df.drop([\"cabin\"], axis=1)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.850999Z","iopub.execute_input":"2024-05-21T07:45:20.851782Z","iopub.status.idle":"2024-05-21T07:45:20.868934Z","shell.execute_reply.started":"2024-05-21T07:45:20.851744Z","shell.execute_reply":"2024-05-21T07:45:20.867834Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.871267Z","iopub.execute_input":"2024-05-21T07:45:20.872338Z","iopub.status.idle":"2024-05-21T07:45:20.885149Z","shell.execute_reply.started":"2024-05-21T07:45:20.872296Z","shell.execute_reply":"2024-05-21T07:45:20.883965Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 418 entries, 892 to 1309\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   pclass       418 non-null    int64  \n 1   name         418 non-null    object \n 2   sex          418 non-null    object \n 3   age          332 non-null    float64\n 4   sibsp        418 non-null    int64  \n 5   parch        418 non-null    int64  \n 6   ticket       418 non-null    object \n 7   fare         417 non-null    float64\n 8   embarked     418 non-null    object \n 9   num_family   418 non-null    int64  \n 10  with_family  418 non-null    int64  \n 11  deck         418 non-null    int64  \ndtypes: float64(2), int64(6), object(4)\nmemory usage: 42.5+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.886414Z","iopub.execute_input":"2024-05-21T07:45:20.887363Z","iopub.status.idle":"2024-05-21T07:45:20.899542Z","shell.execute_reply.started":"2024-05-21T07:45:20.887333Z","shell.execute_reply":"2024-05-21T07:45:20.898507Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 891 entries, 1 to 891\nData columns (total 13 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   survived     891 non-null    int64  \n 1   pclass       891 non-null    int64  \n 2   name         891 non-null    object \n 3   sex          891 non-null    object \n 4   age          714 non-null    float64\n 5   sibsp        891 non-null    int64  \n 6   parch        891 non-null    int64  \n 7   ticket       891 non-null    object \n 8   fare         891 non-null    float64\n 9   embarked     889 non-null    object \n 10  num_family   891 non-null    int64  \n 11  with_family  891 non-null    int64  \n 12  deck         891 non-null    int64  \ndtypes: float64(2), int64(7), object(4)\nmemory usage: 97.5+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### trying to understand  re.compile","metadata":{}},{"cell_type":"code","source":"# test = train_df.iloc[-20:-1, 9:]\n# test","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.900687Z","iopub.execute_input":"2024-05-21T07:45:20.901545Z","iopub.status.idle":"2024-05-21T07:45:20.911437Z","shell.execute_reply.started":"2024-05-21T07:45:20.901513Z","shell.execute_reply":"2024-05-21T07:45:20.910451Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"# test['cabin'] = test['cabin'].astype(int)\n# test.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.912698Z","iopub.execute_input":"2024-05-21T07:45:20.913221Z","iopub.status.idle":"2024-05-21T07:45:20.922947Z","shell.execute_reply.started":"2024-05-21T07:45:20.913191Z","shell.execute_reply":"2024-05-21T07:45:20.921679Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# # converting the cabin info into numeric \n\n# import re\n# deck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\n# data = [test]\n\n# for dataset in data:\n#     # filling a missing value with \"U0\"\n#     test['cabin'] = test['cabin'].fillna(\"U0\")\n    \n#     # fidning alphabet letter from the \"cabin\" column \n#     # .serach(x) looks for the the first occurrence of one or more letters in each value  \n#     # .group() then extracts the letter of the first occurance / anything found by .search() method\n#     test['re.compile'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\"))\n#     test['search'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x))\n#     test['group'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n#     # replacing the aplhabet with a number as per Deck dictionary\n#     test['cabin'] = test['cabin'].map(deck)\n# #     in case of remaining missing value, you replace with 0\n#     test['cabin'] = test['cabin'].fillna(0)\n# #     changing the value into intger\n#     test['cabin'] = test['cabin'].astype(int)\n\n# test\n# # # dropping cabin column\n# # train_df.drop([\"cabin\"], axis=1)\n    \n    \n# # # we can now drop the cabin feature\n# # train_df = train_df.drop(['Cabin'], axis=1)\n# # test_df = test_df.drop(['Cabin'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.92428Z","iopub.execute_input":"2024-05-21T07:45:20.924932Z","iopub.status.idle":"2024-05-21T07:45:20.934039Z","shell.execute_reply.started":"2024-05-21T07:45:20.924902Z","shell.execute_reply":"2024-05-21T07:45:20.93306Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# for dataset in data:\n#     # filling a missing value with \"U0\"\n#     test['cabin'] = test['cabin'].fillna(\"U0\")\n    \n#     # fidning alphabet letter from the \"cabin\" column \n#     # .serach(x) looks for the the first occurrence of one or more letters in each value  \n#     # .group() then extracts the letter of the first occurance / anything found by .search() method\n# #     test['re.compile'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\"))\n# #     test['search'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x))\n# #     test['group'] = test['cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n#     # replacing the aplhabet with a number as per Deck dictionary\n#     test['cabin'] = test['cabin'].map(deck)\n    \n# test","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.935281Z","iopub.execute_input":"2024-05-21T07:45:20.935892Z","iopub.status.idle":"2024-05-21T07:45:20.94825Z","shell.execute_reply.started":"2024-05-21T07:45:20.935861Z","shell.execute_reply":"2024-05-21T07:45:20.94714Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"train_df[train_df[\"deck\"] > 0 ][\"deck\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.949545Z","iopub.execute_input":"2024-05-21T07:45:20.950061Z","iopub.status.idle":"2024-05-21T07:45:20.96817Z","shell.execute_reply.started":"2024-05-21T07:45:20.950024Z","shell.execute_reply":"2024-05-21T07:45:20.967112Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"deck\n8    687\n3     59\n2     47\n4     33\n5     32\n1     15\n6     13\n7      4\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## Age","metadata":{}},{"cell_type":"code","source":"train_std = train_df[\"age\"].std()\ntrain_df[\"age\"] = train_df.loc[train_df[\"age\"].fillna(train_std, inplace = True)]\ntrain_df.age.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:20.969769Z","iopub.execute_input":"2024-05-21T07:45:20.970115Z","iopub.status.idle":"2024-05-21T07:45:22.600493Z","shell.execute_reply.started":"2024-05-21T07:45:20.970088Z","shell.execute_reply":"2024-05-21T07:45:22.596179Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_807/1821249296.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_df[\"age\"] = train_df.loc[train_df[\"age\"].fillna(train_std, inplace = True)]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mindex.pyx:175\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/index_class_helper.pxi:70\u001b[0m, in \u001b[0;36mpandas._libs.index.Int64Engine._check_type\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: None","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[27], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m train_std \u001b[38;5;241m=\u001b[39m train_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mstd()\n\u001b[0;32m----> 2\u001b[0m train_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mtrain_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mage\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfillna\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_std\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minplace\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      3\u001b[0m train_df\u001b[38;5;241m.\u001b[39mage\u001b[38;5;241m.\u001b[39misnull()\u001b[38;5;241m.\u001b[39msum()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1191\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1189\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[1;32m   1190\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_deprecated_callable_usage(key, maybe_callable)\n\u001b[0;32m-> 1191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_getitem_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaybe_callable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1431\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1429\u001b[0m \u001b[38;5;66;03m# fall thru to straight lookup\u001b[39;00m\n\u001b[1;32m   1430\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[0;32m-> 1431\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_label\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1381\u001b[0m, in \u001b[0;36m_LocIndexer._get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_get_label\u001b[39m(\u001b[38;5;28mself\u001b[39m, label, axis: AxisInt):\n\u001b[1;32m   1380\u001b[0m     \u001b[38;5;66;03m# GH#5567 this will fail if the label is not present in the axis.\u001b[39;00m\n\u001b[0;32m-> 1381\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4301\u001b[0m, in \u001b[0;36mNDFrame.xs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   4299\u001b[0m             new_index \u001b[38;5;241m=\u001b[39m index[loc]\n\u001b[1;32m   4300\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4301\u001b[0m     loc \u001b[38;5;241m=\u001b[39m \u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4303\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(loc, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[1;32m   4304\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m loc\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mbool_:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: None"],"ename":"KeyError","evalue":"None","output_type":"error"}]},{"cell_type":"code","source":"test_std = test_df[\"age\"].std()\ntest_df[\"age\"] = test_df.loc[test_df[\"age\"].fillna(test_std, inplace = True)]\ntest_df[\"age\"].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:48:51.218979Z","iopub.execute_input":"2024-05-21T07:48:51.219408Z","iopub.status.idle":"2024-05-21T07:48:51.334985Z","shell.execute_reply.started":"2024-05-21T07:48:51.21936Z","shell.execute_reply":"2024-05-21T07:48:51.333307Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_807/2687229845.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_df[\"age\"] = test_df.loc[test_df[\"age\"].fillna(test_std, inplace = True)]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mindex.pyx:175\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/index_class_helper.pxi:70\u001b[0m, in \u001b[0;36mpandas._libs.index.Int64Engine._check_type\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: None","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[28], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m test_std \u001b[38;5;241m=\u001b[39m test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mstd()\n\u001b[0;32m----> 2\u001b[0m test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mtest_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mtest_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mage\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfillna\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtest_std\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minplace\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      3\u001b[0m test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39misnull()\u001b[38;5;241m.\u001b[39msum()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1191\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1189\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[1;32m   1190\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_deprecated_callable_usage(key, maybe_callable)\n\u001b[0;32m-> 1191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_getitem_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaybe_callable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1431\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1429\u001b[0m \u001b[38;5;66;03m# fall thru to straight lookup\u001b[39;00m\n\u001b[1;32m   1430\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[0;32m-> 1431\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_label\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1381\u001b[0m, in \u001b[0;36m_LocIndexer._get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_get_label\u001b[39m(\u001b[38;5;28mself\u001b[39m, label, axis: AxisInt):\n\u001b[1;32m   1380\u001b[0m     \u001b[38;5;66;03m# GH#5567 this will fail if the label is not present in the axis.\u001b[39;00m\n\u001b[0;32m-> 1381\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4301\u001b[0m, in \u001b[0;36mNDFrame.xs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   4299\u001b[0m             new_index \u001b[38;5;241m=\u001b[39m index[loc]\n\u001b[1;32m   4300\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4301\u001b[0m     loc \u001b[38;5;241m=\u001b[39m \u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4303\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(loc, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[1;32m   4304\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m loc\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mbool_:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: None"],"ename":"KeyError","evalue":"None","output_type":"error"}]},{"cell_type":"code","source":"# data = [train_df, test_df]\n\n# for dataset in data:\n#     mean = train_df[\"age\"].mean()\n#     std = test_df[\"age\"].std()\n#     is_null = dataset[\"age\"].isnull().sum()\n#     # compute random numbers between the mean, std and is_null\n#     rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n#     # fill NaN values in Age column with random values generated\n#     age_slice = dataset[\"age\"].copy()\n#     age_slice[np.isnan(age_slice)] = rand_age\n#     dataset[\"age\"] = age_slice\n#     dataset[\"age\"] = dataset[\"age\"].astype(int)\n# #     dataset[\"Age\"] = train_df[\"Age\"].astype(int)\n    \n# print(train_df[\"age\"].isnull().sum())\n# print(\"---------------\")\n# print(test_df[\"age\"].isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.604308Z","iopub.status.idle":"2024-05-21T07:45:22.604708Z","shell.execute_reply.started":"2024-05-21T07:45:22.604531Z","shell.execute_reply":"2024-05-21T07:45:22.604547Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# data = [test_df]\n\n# for dataset in data:\n#     std = dataset[\"age\"].std()\n#     # fill NaN values in Age column with random values generated\n#     dataset[\"age\"] = dataset[\"age\"].fillna(\"std\", inplace = True)\n#     dataset[\"age\"] = test_df[\"age\"].astype(int)\n    \n    \n    \n    \n# print(test_df[\"age\"].isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.605955Z","iopub.status.idle":"2024-05-21T07:45:22.606346Z","shell.execute_reply.started":"2024-05-21T07:45:22.606173Z","shell.execute_reply":"2024-05-21T07:45:22.606188Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df[\"age\"].isna().sum() + test_df[\"age\"].isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:48:55.659402Z","iopub.execute_input":"2024-05-21T07:48:55.659807Z","iopub.status.idle":"2024-05-21T07:48:55.668258Z","shell.execute_reply.started":"2024-05-21T07:48:55.659778Z","shell.execute_reply":"2024-05-21T07:48:55.666984Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"## embarked","metadata":{}},{"cell_type":"code","source":"train_df.loc[train_df[\"embarked\"].isna()]","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.609742Z","iopub.status.idle":"2024-05-21T07:45:22.610114Z","shell.execute_reply.started":"2024-05-21T07:45:22.609937Z","shell.execute_reply":"2024-05-21T07:45:22.609952Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_df.loc[test_df[\"embarked\"].isna()]","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.612083Z","iopub.status.idle":"2024-05-21T07:45:22.613131Z","shell.execute_reply.started":"2024-05-21T07:45:22.612929Z","shell.execute_reply":"2024-05-21T07:45:22.612949Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"common_value = \"S\"\n\ntrain_df[\"embarked\"] = train_df.loc[train_df[\"embarked\"].fillna(common_value, inplace = True)]\ntest_df[\"embarked\"] = test_df.loc[test_df[\"embarked\"].fillna(common_value, inplace = True)]","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:00.470553Z","iopub.execute_input":"2024-05-21T07:49:00.471466Z","iopub.status.idle":"2024-05-21T07:49:00.75408Z","shell.execute_reply.started":"2024-05-21T07:49:00.471428Z","shell.execute_reply":"2024-05-21T07:49:00.75237Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_807/3866147196.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_df[\"embarked\"] = train_df.loc[train_df[\"embarked\"].fillna(common_value, inplace = True)]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mindex.pyx:175\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/index_class_helper.pxi:70\u001b[0m, in \u001b[0;36mpandas._libs.index.Int64Engine._check_type\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: None","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[30], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m common_value \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mS\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m----> 3\u001b[0m train_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124membarked\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_df\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mtrain_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43membarked\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfillna\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcommon_value\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minplace\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      4\u001b[0m test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124membarked\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m test_df\u001b[38;5;241m.\u001b[39mloc[test_df[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124membarked\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mfillna(common_value, inplace \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m)]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1191\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1189\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[1;32m   1190\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_deprecated_callable_usage(key, maybe_callable)\n\u001b[0;32m-> 1191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_getitem_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaybe_callable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1431\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1429\u001b[0m \u001b[38;5;66;03m# fall thru to straight lookup\u001b[39;00m\n\u001b[1;32m   1430\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[0;32m-> 1431\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_label\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1381\u001b[0m, in \u001b[0;36m_LocIndexer._get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_get_label\u001b[39m(\u001b[38;5;28mself\u001b[39m, label, axis: AxisInt):\n\u001b[1;32m   1380\u001b[0m     \u001b[38;5;66;03m# GH#5567 this will fail if the label is not present in the axis.\u001b[39;00m\n\u001b[0;32m-> 1381\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py:4301\u001b[0m, in \u001b[0;36mNDFrame.xs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   4299\u001b[0m             new_index \u001b[38;5;241m=\u001b[39m index[loc]\n\u001b[1;32m   4300\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4301\u001b[0m     loc \u001b[38;5;241m=\u001b[39m \u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4303\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(loc, np\u001b[38;5;241m.\u001b[39mndarray):\n\u001b[1;32m   4304\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m loc\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mbool_:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: None"],"ename":"KeyError","evalue":"None","output_type":"error"}]},{"cell_type":"markdown","source":"double checking if there are any missing values","metadata":{}},{"cell_type":"code","source":"train_df[\"embarked\"].isna().sum() + test_df[\"embarked\"].isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:03.047012Z","iopub.execute_input":"2024-05-21T07:49:03.047428Z","iopub.status.idle":"2024-05-21T07:49:03.056243Z","shell.execute_reply.started":"2024-05-21T07:49:03.047391Z","shell.execute_reply":"2024-05-21T07:49:03.055352Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"# Data Processing - converting categorical to numerical","metadata":{}},{"cell_type":"code","source":"# float to int for fare col\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['fare'] = dataset['fare'].fillna(0)\n    dataset['fare'] = dataset['fare'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:08.092028Z","iopub.execute_input":"2024-05-21T07:49:08.092414Z","iopub.status.idle":"2024-05-21T07:49:08.100513Z","shell.execute_reply.started":"2024-05-21T07:49:08.092358Z","shell.execute_reply":"2024-05-21T07:49:08.099155Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"# we have three cols with a categorical value\ncategorical_col = train_df.select_dtypes([\"object\"]).columns\ncategorical_col    ","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:10.164909Z","iopub.execute_input":"2024-05-21T07:49:10.165285Z","iopub.status.idle":"2024-05-21T07:49:10.173282Z","shell.execute_reply.started":"2024-05-21T07:49:10.165258Z","shell.execute_reply":"2024-05-21T07:49:10.172429Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"Index(['name', 'sex', 'ticket', 'embarked'], dtype='object')"},"metadata":{}}]},{"cell_type":"markdown","source":"## Name","metadata":{}},{"cell_type":"code","source":"data = [train_df, test_df]\ntitles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n\nfor dataset in data:\n    # extract titles\n    # ([a-zA-Z]+) looks for series / a letter of alphabets but if itÂ´s with \\. \n    # ([A-Za-z]+)\\. finds a anything that has . followed by aplhabets, therefore a title    \n    dataset['title'] = dataset[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    dataset['title_extract'] = dataset[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # replace titles with a more common title or as Rare\n    dataset['title'] = dataset['title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\\\n                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['title'] = dataset['title'].replace('Mlle', 'Miss')\n    dataset['title'] = dataset['title'].replace('Ms', 'Miss')\n    dataset['title'] = dataset['title'].replace('Mme', 'Mrs')\n    # convert titles into numbers\n    dataset['title'] = dataset['title'].map(titles)\n    dataset['title_map'] = dataset['title'].map(titles)\n    # filling NaN with 0, just in case\n    dataset['title'] = dataset['title'].fillna(0)\n    \n# dropping name col\ntrain_df = train_df.drop(['name'], axis=1)\ntest_df = test_df.drop(['name'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:12.67928Z","iopub.execute_input":"2024-05-21T07:49:12.680436Z","iopub.status.idle":"2024-05-21T07:49:12.709766Z","shell.execute_reply.started":"2024-05-21T07:49:12.680368Z","shell.execute_reply":"2024-05-21T07:49:12.708396Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"train_df['title_extract'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:15.951465Z","iopub.execute_input":"2024-05-21T07:49:15.95189Z","iopub.status.idle":"2024-05-21T07:49:15.959996Z","shell.execute_reply.started":"2024-05-21T07:49:15.951861Z","shell.execute_reply":"2024-05-21T07:49:15.959099Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"title_extract\nMr          517\nMiss        182\nMrs         125\nMaster       40\nDr            7\nRev           6\nMlle          2\nMajor         2\nCol           2\nCountess      1\nCapt          1\nMs            1\nSir           1\nLady          1\nMme           1\nDon           1\nJonkheer      1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df['title'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:18.236603Z","iopub.execute_input":"2024-05-21T07:49:18.237212Z","iopub.status.idle":"2024-05-21T07:49:18.248618Z","shell.execute_reply.started":"2024-05-21T07:49:18.237173Z","shell.execute_reply":"2024-05-21T07:49:18.2469Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"title\n1    517\n2    185\n3    126\n4     40\n5     23\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df = train_df.drop(columns = [\"title_extract\", \"title_map\"], axis = 1)\ntest_df = test_df.drop(columns = [\"title_extract\", \"title_map\"], axis= 1)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:20.202747Z","iopub.execute_input":"2024-05-21T07:49:20.203147Z","iopub.status.idle":"2024-05-21T07:49:20.210711Z","shell.execute_reply.started":"2024-05-21T07:49:20.203116Z","shell.execute_reply":"2024-05-21T07:49:20.209456Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.629589Z","iopub.status.idle":"2024-05-21T07:45:22.629922Z","shell.execute_reply.started":"2024-05-21T07:45:22.629757Z","shell.execute_reply":"2024-05-21T07:45:22.629771Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.631259Z","iopub.status.idle":"2024-05-21T07:45:22.631657Z","shell.execute_reply.started":"2024-05-21T07:45:22.631441Z","shell.execute_reply":"2024-05-21T07:45:22.631455Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## sex","metadata":{}},{"cell_type":"code","source":"genders = {\"male\": 0, \"female\": 1}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['sex'] = dataset['sex'].map(genders)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:23.282029Z","iopub.execute_input":"2024-05-21T07:49:23.282457Z","iopub.status.idle":"2024-05-21T07:49:23.291506Z","shell.execute_reply.started":"2024-05-21T07:49:23.282424Z","shell.execute_reply":"2024-05-21T07:49:23.28987Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":"## Ticket","metadata":{}},{"cell_type":"code","source":"train_df['ticket'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.634778Z","iopub.status.idle":"2024-05-21T07:45:22.635384Z","shell.execute_reply.started":"2024-05-21T07:45:22.635182Z","shell.execute_reply":"2024-05-21T07:45:22.635199Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df['ticket'].describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.636495Z","iopub.status.idle":"2024-05-21T07:45:22.636839Z","shell.execute_reply.started":"2024-05-21T07:45:22.636665Z","shell.execute_reply":"2024-05-21T07:45:22.636679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df = train_df.drop(columns=[\"ticket\"], axis=1)\ntrain_df\n\ntest_df = test_df.drop(columns=[\"ticket\"], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:25.896986Z","iopub.execute_input":"2024-05-21T07:49:25.897587Z","iopub.status.idle":"2024-05-21T07:49:25.906753Z","shell.execute_reply.started":"2024-05-21T07:49:25.897543Z","shell.execute_reply":"2024-05-21T07:49:25.905494Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"markdown","source":"## embarked","metadata":{}},{"cell_type":"code","source":"ports = {\"S\": 0, \"C\": 1, \"Q\": 2}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['embarked'] = dataset['embarked'].map(ports)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:27.981623Z","iopub.execute_input":"2024-05-21T07:49:27.984167Z","iopub.status.idle":"2024-05-21T07:49:27.992349Z","shell.execute_reply.started":"2024-05-21T07:49:27.984127Z","shell.execute_reply":"2024-05-21T07:49:27.991278Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.641216Z","iopub.status.idle":"2024-05-21T07:45:22.64163Z","shell.execute_reply.started":"2024-05-21T07:45:22.641451Z","shell.execute_reply":"2024-05-21T07:45:22.641467Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.642947Z","iopub.status.idle":"2024-05-21T07:45:22.643301Z","shell.execute_reply.started":"2024-05-21T07:45:22.643126Z","shell.execute_reply":"2024-05-21T07:45:22.64314Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# changing the datatype of age to int\n\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset[\"age\"] = dataset[\"age\"].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:29.877753Z","iopub.execute_input":"2024-05-21T07:49:29.878512Z","iopub.status.idle":"2024-05-21T07:49:29.884361Z","shell.execute_reply.started":"2024-05-21T07:49:29.878477Z","shell.execute_reply":"2024-05-21T07:49:29.883313Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.646305Z","iopub.status.idle":"2024-05-21T07:45:22.646667Z","shell.execute_reply.started":"2024-05-21T07:45:22.646503Z","shell.execute_reply":"2024-05-21T07:45:22.646518Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# remapping the heatmap","metadata":{}},{"cell_type":"code","source":"train_heat = train_df.copy()\n\n# train_heat = train_heat.drop(columns = [\"sibsp\", \"parch\", \"with_family\"], axis = 1)\ntrain_heat_corr = train_heat.corr()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:32.079329Z","iopub.execute_input":"2024-05-21T07:49:32.079725Z","iopub.status.idle":"2024-05-21T07:49:32.086174Z","shell.execute_reply.started":"2024-05-21T07:49:32.079697Z","shell.execute_reply":"2024-05-21T07:49:32.084909Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 8))\nsns.heatmap(train_heat_corr, annot=True, cmap='coolwarm', linewidths=0.5)\n\n# Add a title\nplt.title('Correlation Heatmap')\n\n# Display the heatmap\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:49:34.153775Z","iopub.execute_input":"2024-05-21T07:49:34.154171Z","iopub.status.idle":"2024-05-21T07:49:34.847467Z","shell.execute_reply.started":"2024-05-21T07:49:34.154139Z","shell.execute_reply":"2024-05-21T07:49:34.846311Z"},"trusted":true},"execution_count":43,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":".stop running code here","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.650783Z","iopub.status.idle":"2024-05-21T07:45:22.651127Z","shell.execute_reply.started":"2024-05-21T07:45:22.650956Z","shell.execute_reply":"2024-05-21T07:45:22.650969Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Building models","metadata":{}},{"cell_type":"code","source":"# # from sklearn.ensemble import RandomForestClassifier\n\n# y = train_df[\"survived\"]\n\n# features = [\"pclass\", \"sex\", \"with_family\"]\n# X = pd.get_dummies(train_df[features])\n# X_test = pd.get_dummies(test_df[features])\n\n# model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\n# model.fit(X, y)\n# predictions = model.predict(X_test)\n\n# output = pd.DataFrame({'passengerid': train_df[\"passengerid\"], 'survived': predictions})\n# output.to_csv('submission.csv', index=False)\n# print(\"Your submission was successfully saved!\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.652042Z","iopub.status.idle":"2024-05-21T07:45:22.652386Z","shell.execute_reply.started":"2024-05-21T07:45:22.652209Z","shell.execute_reply":"2024-05-21T07:45:22.652223Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# titanic_full = pd.concat([X_train, X_test])\n# survived_full = pd.concat([y_train, y_test])\n# final_classifier = RandomForestClassifier(**random_search.best_params_)\n# final_classifier.fit(titanic_full, survived_full)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Random Forest","metadata":{}},{"cell_type":"code","source":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nreslt_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.653559Z","iopub.status.idle":"2024-05-21T07:45:22.653892Z","shell.execute_reply.started":"2024-05-21T07:45:22.653729Z","shell.execute_reply":"2024-05-21T07:45:22.653743Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Logistic Regresseion","metadata":{}},{"cell_type":"code","source":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nreslt_log = round(logreg.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.654788Z","iopub.status.idle":"2024-05-21T07:45:22.655115Z","shell.execute_reply.started":"2024-05-21T07:45:22.654952Z","shell.execute_reply":"2024-05-21T07:45:22.654965Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Gaussian Naive Bayes:","metadata":{}},{"cell_type":"code","source":"gaussian = GaussianNB() \ngaussian.fit(X_train, Y_train)  \n\nY_pred = gaussian.predict(X_test)  \n\nreslt_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.656077Z","iopub.status.idle":"2024-05-21T07:45:22.656418Z","shell.execute_reply.started":"2024-05-21T07:45:22.656239Z","shell.execute_reply":"2024-05-21T07:45:22.656252Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# KNN","metadata":{}},{"cell_type":"code","source":"knn = KNeighborsClassifier(n_neighbors = 3) \nknn.fit(X_train, Y_train)  \n\nY_pred = knn.predict(X_test)  \n\nreslt_knn = round(knn.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.657257Z","iopub.status.idle":"2024-05-21T07:45:22.657608Z","shell.execute_reply.started":"2024-05-21T07:45:22.657435Z","shell.execute_reply":"2024-05-21T07:45:22.657449Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Decision tree","metadata":{}},{"cell_type":"code","source":"decision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train, Y_train)  \n\nY_pred = decision_tree.predict(X_test)  \n\nreslt_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.658717Z","iopub.status.idle":"2024-05-21T07:45:22.66382Z","shell.execute_reply.started":"2024-05-21T07:45:22.663571Z","shell.execute_reply":"2024-05-21T07:45:22.663595Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Result","metadata":{}},{"cell_type":"code","source":"results = pd.DataFrame({\n    'Model': ['Random Forest', \n              'Logistic Regression', \n              'Gaussian Naive Bayes',\n              'KNN', \n              'Decision Tree'],\n    'Score': [reslt_random_forest, \n              reslt_log,\n              reslt_gaussian, \n              reslt_knn, \n              reslt_decision_tree]\n})\n\nresult_df = results.sort_values(by='Score', ascending=False)\n\nresult_df","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.66467Z","iopub.status.idle":"2024-05-21T07:45:22.665051Z","shell.execute_reply.started":"2024-05-21T07:45:22.664868Z","shell.execute_reply":"2024-05-21T07:45:22.664884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_csv = pd.read_csv(\"/kaggle/working/submission.csv\")\nresult_csv","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.666357Z","iopub.status.idle":"2024-05-21T07:45:22.666811Z","shell.execute_reply.started":"2024-05-21T07:45:22.66662Z","shell.execute_reply":"2024-05-21T07:45:22.666637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output = pd.DataFrame({'PassengerId': test_df[\"passengerid\"], 'Survived': reslt_decision_tree})\n\noutput.to_csv('submission.csv', index=False)\n# print(\"Your submission was successfully saved!\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T07:45:22.667815Z","iopub.status.idle":"2024-05-21T07:45:22.668207Z","shell.execute_reply.started":"2024-05-21T07:45:22.668021Z","shell.execute_reply":"2024-05-21T07:45:22.668037Z"},"trusted":true},"execution_count":null,"outputs":[]}]}